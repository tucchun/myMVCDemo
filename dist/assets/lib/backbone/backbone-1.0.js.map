{"version":3,"sources":["assets/lib/backbone/backbone-1.0.js"],"names":["Backbone","root","this","previousBackbone","array","push","slice","splice","exports","VERSION","_","require","$","jQuery","Zepto","ender","noConflict","emulateHTTP","emulateJSON","Events","on","name","callback","context","eventsApi","_events","events","ctx","once","self","off","apply","arguments","_callback","retain","ev","names","i","l","j","k","keys","length","trigger","args","call","allEvents","all","triggerEvents","stopListening","obj","listeners","_listeners","deleteListener","_listenerId","id","eventSplitter","action","rest","key","concat","test","split","a1","a2","a3","listenMethods","listenTo","listenToOnce","each","implementation","method","uniqueId","bind","unbind","extend","Model","attributes","options","defaults","attrs","cid","pick","modelOptions","parse","result","set","changed","initialize","prototype","validationError","idAttribute","toJSON","clone","sync","get","attr","escape","has","val","unset","changes","silent","changing","prev","current","_validate","_changing","_previousAttributes","isEqual","_pending","clear","hasChanged","isEmpty","changedAttributes","diff","old","previous","previousAttributes","fetch","model","success","resp","wrapError","save","xhr","wait","validate","serverAttrs","isObject","isNew","patch","destroy","collection","url","base","urlError","charAt","encodeURIComponent","constructor","isValid","error","modelMethods","unshift","Collection","models","comparator","_reset","reset","setOptions","add","remove","merge","addOptions","map","isArray","index","_byId","indexOf","_removeReference","existing","sort","at","sortable","sortAttr","isString","toAdd","toRemove","modelMap","_prepareModel","_onModelEvent","previousModels","pop","shift","where","first","findWhere","Error","sortBy","sortedIndex","value","iterator","isFunction","pluck","invoke","create","event","methods","attributeMethods","View","_configure","_ensureElement","delegateEvents","delegateEventSplitter","viewOptions","tagName","selector","$el","find","render","setElement","element","delegate","undelegateEvents","el","match","eventName","className","type","methodMap","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","window","ActiveXObject","external","msActiveXFilteringEnabled","ajax","update","delete","read","Router","routes","_bindRoutes","optionalParam","namedParam","splatParam","escapeRegExp","route","isRegExp","_routeToRegExp","router","history","fragment","_extractParameters","navigate","replace","optional","RegExp","exec","param","decodeURIComponent","History","handlers","bindAll","location","routeStripper","rootStripper","isExplorer","trailingSlash","started","interval","getHash","href","getFragment","forcePushState","_hasPushState","_wantsHashChange","pathname","substr","start","hashChange","_wantsPushState","pushState","docMode","document","documentMode","oldIE","navigator","userAgent","toLowerCase","iframe","hide","appendTo","contentWindow","checkUrl","_checkUrlInterval","setInterval","loc","atRoot","search","hash","replaceState","title","loadUrl","stop","clearInterval","e","fragmentOverride","matched","any","handler","assign","_updateHash","open","close","protoProps","staticProps","child","parent","Surrogate","__super__"],"mappings":"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","file":"backbone-1.0.js","sourcesContent":["//     Backbone.js 1.0.0\r\n\r\n//     (c) 2010-2013 Jeremy Ashkenas, DocumentCloud Inc.\r\n//     Backbone may be freely distributed under the MIT license.\r\n//     For all details and documentation:\r\n//     http://backbonejs.org\r\n\r\n(function(){\r\n\r\n    // Initial Setup\r\n    // -------------\r\n\r\n    // Save a reference to the global object (`window` in the browser, `exports`\r\n    // on the server).\r\n    var root = this;\r\n\r\n    // Save the previous value of the `Backbone` variable, so that it can be\r\n    // restored later on, if `noConflict` is used.\r\n    var previousBackbone = root.Backbone;\r\n\r\n    // Create local references to array methods we'll want to use later.\r\n    var array = [];\r\n    var push = array.push;\r\n    var slice = array.slice;\r\n    var splice = array.splice;\r\n\r\n    // The top-level namespace. All public Backbone classes and modules will\r\n    // be attached to this. Exported for both the browser and the server.\r\n    var Backbone;\r\n    if (typeof exports !== 'undefined') {\r\n        Backbone = exports;\r\n    } else {\r\n        Backbone = root.Backbone = {};\r\n    }\r\n\r\n    // Current version of the library. Keep in sync with `package.json`.\r\n    Backbone.VERSION = '1.0.0';\r\n\r\n    // Require Underscore, if we're on the server, and it's not already present.\r\n    var _ = root._;\r\n    if (!_ && (typeof require !== 'undefined')) _ = require('underscore');\r\n\r\n    // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns\r\n    // the `$` variable.\r\n    Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;\r\n\r\n    // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\r\n    // to its previous owner. Returns a reference to this Backbone object.\r\n    Backbone.noConflict = function() {\r\n        root.Backbone = previousBackbone;\r\n        return this;\r\n    };\r\n\r\n    // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\r\n    // will fake `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\r\n    // set a `X-Http-Method-Override` header.\r\n    Backbone.emulateHTTP = false;\r\n\r\n    // Turn on `emulateJSON` to support legacy servers that can't deal with direct\r\n    // `application/json` requests ... will encode the body as\r\n    // `application/x-www-form-urlencoded` instead and will send the model in a\r\n    // form param named `model`.\r\n    Backbone.emulateJSON = false;\r\n\r\n    // Backbone.Events\r\n    // ---------------\r\n\r\n    // A module that can be mixed in to *any object* in order to provide it with\r\n    // custom events. You may bind with `on` or remove with `off` callback\r\n    // functions to an event; `trigger`-ing an event fires all callbacks in\r\n    // succession.\r\n    //\r\n    //     var object = {};\r\n    //     _.extend(object, Backbone.Events);\r\n    //     object.on('expand', function(){ alert('expanded'); });\r\n    //     object.trigger('expand');\r\n    //\r\n    var Events = Backbone.Events = {\r\n\r\n        // Bind an event to a `callback` function. Passing `\"all\"` will bind\r\n        // the callback to all events fired.\r\n        on: function(name, callback, context) {\r\n            if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;\r\n            this._events || (this._events = {});\r\n            var events = this._events[name] || (this._events[name] = []);\r\n            events.push({callback: callback, context: context, ctx: context || this});\r\n            return this;\r\n        },\r\n\r\n        // Bind an event to only be triggered a single time. After the first time\r\n        // the callback is invoked, it will be removed.\r\n        once: function(name, callback, context) {\r\n            if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;\r\n            var self = this;\r\n            var once = _.once(function() {\r\n                self.off(name, once);\r\n                callback.apply(this, arguments);\r\n            });\r\n            once._callback = callback;\r\n            return this.on(name, once, context);\r\n        },\r\n\r\n        // Remove one or many callbacks. If `context` is null, removes all\r\n        // callbacks with that function. If `callback` is null, removes all\r\n        // callbacks for the event. If `name` is null, removes all bound\r\n        // callbacks for all events.\r\n        off: function(name, callback, context) {\r\n            var retain, ev, events, names, i, l, j, k;\r\n            if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;\r\n            if (!name && !callback && !context) {\r\n                this._events = {};\r\n                return this;\r\n            }\r\n\r\n            names = name ? [name] : _.keys(this._events);\r\n            for (i = 0, l = names.length; i < l; i++) {\r\n                name = names[i];\r\n                if (events = this._events[name]) {\r\n                    this._events[name] = retain = [];\r\n                    if (callback || context) {\r\n                        for (j = 0, k = events.length; j < k; j++) {\r\n                            ev = events[j];\r\n                            if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||\r\n                                (context && context !== ev.context)) {\r\n                                retain.push(ev);\r\n                            }\r\n                        }\r\n                    }\r\n                    if (!retain.length) delete this._events[name];\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n\r\n        // Trigger one or many events, firing all bound callbacks. Callbacks are\r\n        // passed the same arguments as `trigger` is, apart from the event name\r\n        // (unless you're listening on `\"all\"`, which will cause your callback to\r\n        // receive the true name of the event as the first argument).\r\n        trigger: function(name) {\r\n            if (!this._events) return this;\r\n            var args = slice.call(arguments, 1);\r\n            if (!eventsApi(this, 'trigger', name, args)) return this;\r\n            var events = this._events[name];\r\n            var allEvents = this._events.all;\r\n            if (events) triggerEvents(events, args);\r\n            if (allEvents) triggerEvents(allEvents, arguments);\r\n            return this;\r\n        },\r\n\r\n        // Tell this object to stop listening to either specific events ... or\r\n        // to every object it's currently listening to.\r\n        stopListening: function(obj, name, callback) {\r\n            var listeners = this._listeners;\r\n            if (!listeners) return this;\r\n            var deleteListener = !name && !callback;\r\n            if (typeof name === 'object') callback = this;\r\n            if (obj) (listeners = {})[obj._listenerId] = obj;\r\n            for (var id in listeners) {\r\n                listeners[id].off(name, callback, this);\r\n                if (deleteListener) delete this._listeners[id];\r\n            }\r\n            return this;\r\n        }\r\n\r\n    };\r\n\r\n    // Regular expression used to split event strings.\r\n    var eventSplitter = /\\s+/;\r\n\r\n    // Implement fancy features of the Events API such as multiple event\r\n    // names `\"change blur\"` and jQuery-style event maps `{change: action}`\r\n    // in terms of the existing API.\r\n    var eventsApi = function(obj, action, name, rest) {\r\n        if (!name) return true;\r\n\r\n        // Handle event maps.\r\n        if (typeof name === 'object') {\r\n            for (var key in name) {\r\n                obj[action].apply(obj, [key, name[key]].concat(rest));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        // Handle space separated event names.\r\n        if (eventSplitter.test(name)) {\r\n            var names = name.split(eventSplitter);\r\n            for (var i = 0, l = names.length; i < l; i++) {\r\n                obj[action].apply(obj, [names[i]].concat(rest));\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    };\r\n\r\n    // A difficult-to-believe, but optimized internal dispatch function for\r\n    // triggering events. Tries to keep the usual cases speedy (most internal\r\n    // Backbone events have 3 arguments).\r\n    var triggerEvents = function(events, args) {\r\n        var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];\r\n        switch (args.length) {\r\n            case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;\r\n            case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;\r\n            case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;\r\n            case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;\r\n            default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);\r\n        }\r\n    };\r\n\r\n    var listenMethods = {listenTo: 'on', listenToOnce: 'once'};\r\n\r\n    // Inversion-of-control versions of `on` and `once`. Tell *this* object to\r\n    // listen to an event in another object ... keeping track of what it's\r\n    // listening to.\r\n    _.each(listenMethods, function(implementation, method) {\r\n        Events[method] = function(obj, name, callback) {\r\n            var listeners = this._listeners || (this._listeners = {});\r\n            var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));\r\n            listeners[id] = obj;\r\n            if (typeof name === 'object') callback = this;\r\n            obj[implementation](name, callback, this);\r\n            return this;\r\n        };\r\n    });\r\n\r\n    // Aliases for backwards compatibility.\r\n    Events.bind   = Events.on;\r\n    Events.unbind = Events.off;\r\n\r\n    // Allow the `Backbone` object to serve as a global event bus, for folks who\r\n    // want global \"pubsub\" in a convenient place.\r\n    _.extend(Backbone, Events);\r\n\r\n    // Backbone.Model\r\n    // --------------\r\n\r\n    // Backbone **Models** are the basic data object in the framework --\r\n    // frequently representing a row in a table in a database on your server.\r\n    // A discrete chunk of data and a bunch of useful, related methods for\r\n    // performing computations and transformations on that data.\r\n\r\n    // Create a new model with the specified attributes. A client id (`cid`)\r\n    // is automatically generated and assigned for you.\r\n    var Model = Backbone.Model = function(attributes, options) {\r\n        var defaults;\r\n        var attrs = attributes || {};\r\n        options || (options = {});\r\n        this.cid = _.uniqueId('c');\r\n        this.attributes = {};\r\n        _.extend(this, _.pick(options, modelOptions));\r\n        if (options.parse) attrs = this.parse(attrs, options) || {};\r\n        if (defaults = _.result(this, 'defaults')) {\r\n            attrs = _.defaults({}, attrs, defaults);\r\n        }\r\n        this.set(attrs, options);\r\n        this.changed = {};\r\n        this.initialize.apply(this, arguments);\r\n    };\r\n\r\n    // A list of options to be attached directly to the model, if provided.\r\n    var modelOptions = ['urlRoot', 'collection'];\r\n\r\n    // Attach all inheritable methods to the Model prototype.\r\n    _.extend(Model.prototype, Events, {\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // Initialize is an empty function by default. Override it with your own\r\n        // initialization logic.\r\n        initialize: function(){},\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n            return _.clone(this.attributes);\r\n        },\r\n\r\n        // Proxy `Backbone.sync` by default -- but override this if you need\r\n        // custom syncing semantics for *this* particular model.\r\n        sync: function() {\r\n            return Backbone.sync.apply(this, arguments);\r\n        },\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n            return this.attributes[attr];\r\n        },\r\n\r\n        // Get the HTML-escaped value of an attribute.\r\n        escape: function(attr) {\r\n            return _.escape(this.get(attr));\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n            return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n            var attr, attrs, unset, changes, silent, changing, prev, current;\r\n            if (key == null) return this;\r\n\r\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n            if (typeof key === 'object') {\r\n                attrs = key;\r\n                options = val;\r\n            } else {\r\n                (attrs = {})[key] = val;\r\n            }\r\n\r\n            options || (options = {});\r\n\r\n            // Run validation.\r\n            if (!this._validate(attrs, options)) return false;\r\n\r\n            // Extract attributes and options.\r\n            unset           = options.unset;\r\n            silent          = options.silent;\r\n            changes         = [];\r\n            changing        = this._changing;\r\n            this._changing  = true;\r\n\r\n            if (!changing) {\r\n                this._previousAttributes = _.clone(this.attributes);\r\n                this.changed = {};\r\n            }\r\n            current = this.attributes, prev = this._previousAttributes;\r\n\r\n            // Check for changes of `id`.\r\n            if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\r\n\r\n            // For each `set` attribute, update or delete the current value.\r\n            for (attr in attrs) {\r\n                val = attrs[attr];\r\n                if (!_.isEqual(current[attr], val)) changes.push(attr);\r\n                if (!_.isEqual(prev[attr], val)) {\r\n                    this.changed[attr] = val;\r\n                } else {\r\n                    delete this.changed[attr];\r\n                }\r\n                unset ? delete current[attr] : current[attr] = val;\r\n            }\r\n\r\n            // Trigger all relevant attribute changes.\r\n            if (!silent) {\r\n                if (changes.length) this._pending = true;\r\n                for (var i = 0, l = changes.length; i < l; i++) {\r\n                    this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n                }\r\n            }\r\n\r\n            // You might be wondering why there's a `while` loop here. Changes can\r\n            // be recursively nested within `\"change\"` events.\r\n            if (changing) return this;\r\n            if (!silent) {\r\n                while (this._pending) {\r\n                    this._pending = false;\r\n                    this.trigger('change', this, options);\r\n                }\r\n            }\r\n            this._pending = false;\r\n            this._changing = false;\r\n            return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n            return this.set(attr, void 0, _.extend({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n            var attrs = {};\r\n            for (var key in this.attributes) attrs[key] = void 0;\r\n            return this.set(attrs, _.extend({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n            if (attr == null) return !_.isEmpty(this.changed);\r\n            return _.has(this.changed, attr);\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n            if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\r\n            var val, changed = false;\r\n            var old = this._changing ? this._previousAttributes : this.attributes;\r\n            for (var attr in diff) {\r\n                if (_.isEqual(old[attr], (val = diff[attr]))) continue;\r\n                (changed || (changed = {}))[attr] = val;\r\n            }\r\n            return changed;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n            if (attr == null || !this._previousAttributes) return null;\r\n            return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n            return _.clone(this._previousAttributes);\r\n        },\r\n\r\n        // Fetch the model from the server. If the server's representation of the\r\n        // model differs from its current attributes, they will be overridden,\r\n        // triggering a `\"change\"` event.\r\n        fetch: function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (options.parse === void 0) options.parse = true;\r\n            var model = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                if (!model.set(model.parse(resp, options), options)) return false;\r\n                if (success) success(model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        },\r\n\r\n        // Set a hash of model attributes, and sync the model to the server.\r\n        // If the server returns an attributes hash that differs, the model's\r\n        // state will be `set` again.\r\n        save: function(key, val, options) {\r\n            var attrs, method, xhr, attributes = this.attributes;\r\n\r\n            // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n            if (key == null || typeof key === 'object') {\r\n                attrs = key;\r\n                options = val;\r\n            } else {\r\n                (attrs = {})[key] = val;\r\n            }\r\n\r\n            // If we're not waiting and attributes exist, save acts as `set(attr).save(null, opts)`.\r\n            if (attrs && (!options || !options.wait) && !this.set(attrs, options)) return false;\r\n\r\n            options = _.extend({validate: true}, options);\r\n\r\n            // Do not persist invalid models.\r\n            if (!this._validate(attrs, options)) return false;\r\n\r\n            // Set temporary attributes if `{wait: true}`.\r\n            if (attrs && options.wait) {\r\n                this.attributes = _.extend({}, attributes, attrs);\r\n            }\r\n\r\n            // After a successful server-side save, the client is (optionally)\r\n            // updated with the server-side state.\r\n            if (options.parse === void 0) options.parse = true;\r\n            var model = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                // Ensure attributes are restored during synchronous saves.\r\n                model.attributes = attributes;\r\n                var serverAttrs = model.parse(resp, options);\r\n                if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);\r\n                if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {\r\n                    return false;\r\n                }\r\n                if (success) success(model, resp, options);\r\n                model.trigger('sync', model, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n\r\n            method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');\r\n            if (method === 'patch') options.attrs = attrs;\r\n            xhr = this.sync(method, this, options);\r\n\r\n            // Restore attributes.\r\n            if (attrs && options.wait) this.attributes = attributes;\r\n\r\n            return xhr;\r\n        },\r\n\r\n        // Destroy this model on the server if it was already persisted.\r\n        // Optimistically removes the model from its collection, if it has one.\r\n        // If `wait: true` is passed, waits for the server to respond before removal.\r\n        destroy: function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            var model = this;\r\n            var success = options.success;\r\n\r\n            var destroy = function() {\r\n                model.trigger('destroy', model, model.collection, options);\r\n            };\r\n\r\n            options.success = function(resp) {\r\n                if (options.wait || model.isNew()) destroy();\r\n                if (success) success(model, resp, options);\r\n                if (!model.isNew()) model.trigger('sync', model, resp, options);\r\n            };\r\n\r\n            if (this.isNew()) {\r\n                options.success();\r\n                return false;\r\n            }\r\n            wrapError(this, options);\r\n\r\n            var xhr = this.sync('delete', this, options);\r\n            if (!options.wait) destroy();\r\n            return xhr;\r\n        },\r\n\r\n        // Default URL for the model's representation on the server -- if you're\r\n        // using Backbone's restful methods, override this to change the endpoint\r\n        // that will be called.\r\n        url: function() {\r\n            var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();\r\n            if (this.isNew()) return base;\r\n            return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);\r\n        },\r\n\r\n        // **parse** converts a response into the hash of attributes to be `set` on\r\n        // the model. The default implementation is just to pass the response along.\r\n        parse: function(resp, options) {\r\n            return resp;\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n            return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n            return this.id == null;\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n            return this._validate({}, _.extend(options || {}, { validate: true }));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n            if (!options.validate || !this.validate) return true;\r\n            attrs = _.extend({}, this.attributes, attrs);\r\n            var error = this.validationError = this.validate(attrs, options) || null;\r\n            if (!error) return true;\r\n            this.trigger('invalid', this, error, _.extend(options || {}, {validationError: error}));\r\n            return false;\r\n        }\r\n\r\n    });\r\n\r\n    // Underscore methods that we want to implement on the Model.\r\n    var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];\r\n\r\n    // Mix in each Underscore method as a proxy to `Model#attributes`.\r\n    _.each(modelMethods, function(method) {\r\n        Model.prototype[method] = function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.attributes);\r\n            return _[method].apply(_, args);\r\n        };\r\n    });\r\n\r\n    // Backbone.Collection\r\n    // -------------------\r\n\r\n    // If models tend to represent a single row of data, a Backbone Collection is\r\n    // more analagous to a table full of data ... or a small slice or page of that\r\n    // table, or a collection of rows that belong together for a particular reason\r\n    // -- all of the messages in this particular folder, all of the documents\r\n    // belonging to this particular author, and so on. Collections maintain\r\n    // indexes of their models, both in order, and for lookup by `id`.\r\n\r\n    // Create a new **Collection**, perhaps to contain a specific type of `model`.\r\n    // If a `comparator` is specified, the Collection will maintain\r\n    // its models in sort order, as they're added and removed.\r\n    var Collection = Backbone.Collection = function(models, options) {\r\n        options || (options = {});\r\n        if (options.url) this.url = options.url;\r\n        if (options.model) this.model = options.model;\r\n        if (options.comparator !== void 0) this.comparator = options.comparator;\r\n        this._reset();\r\n        this.initialize.apply(this, arguments);\r\n        if (models) this.reset(models, _.extend({silent: true}, options));\r\n    };\r\n\r\n    // Default options for `Collection#set`.\r\n    var setOptions = {add: true, remove: true, merge: true};\r\n    var addOptions = {add: true, merge: false, remove: false};\r\n\r\n    // Define the Collection's inheritable methods.\r\n    _.extend(Collection.prototype, Events, {\r\n\r\n        // The default model for a collection is just a **Backbone.Model**.\r\n        // This should be overridden in most cases.\r\n        model: Model,\r\n\r\n        // Initialize is an empty function by default. Override it with your own\r\n        // initialization logic.\r\n        initialize: function(){},\r\n\r\n        // The JSON representation of a Collection is an array of the\r\n        // models' attributes.\r\n        toJSON: function(options) {\r\n            return this.map(function(model){ return model.toJSON(options); });\r\n        },\r\n\r\n        // Proxy `Backbone.sync` by default.\r\n        sync: function() {\r\n            return Backbone.sync.apply(this, arguments);\r\n        },\r\n\r\n        // Add a model, or list of models to the set.\r\n        add: function(models, options) {\r\n            return this.set(models, _.defaults(options || {}, addOptions));\r\n        },\r\n\r\n        // Remove a model, or a list of models from the set.\r\n        remove: function(models, options) {\r\n            models = _.isArray(models) ? models.slice() : [models];\r\n            options || (options = {});\r\n            var i, l, index, model;\r\n            for (i = 0, l = models.length; i < l; i++) {\r\n                model = this.get(models[i]);\r\n                if (!model) continue;\r\n                delete this._byId[model.id];\r\n                delete this._byId[model.cid];\r\n                index = this.indexOf(model);\r\n                this.models.splice(index, 1);\r\n                this.length--;\r\n                if (!options.silent) {\r\n                    options.index = index;\r\n                    model.trigger('remove', model, this, options);\r\n                }\r\n                this._removeReference(model);\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // Update a collection by `set`-ing a new list of models, adding new ones,\r\n        // removing models that are no longer present, and merging models that\r\n        // already exist in the collection, as necessary. Similar to **Model#set**,\r\n        // the core operation for updating the data contained by the collection.\r\n        set: function(models, options) {\r\n            options = _.defaults(options || {}, setOptions);\r\n            if (options.parse) models = this.parse(models, options);\r\n            if (!_.isArray(models)) models = models ? [models] : [];\r\n            var i, l, model, attrs, existing, sort;\r\n            var at = options.at;\r\n            var sortable = this.comparator && (at == null) && options.sort !== false;\r\n            var sortAttr = _.isString(this.comparator) ? this.comparator : null;\r\n            var toAdd = [], toRemove = [], modelMap = {};\r\n\r\n            // Turn bare objects into model references, and prevent invalid models\r\n            // from being added.\r\n            for (i = 0, l = models.length; i < l; i++) {\r\n                if (!(model = this._prepareModel(models[i], options))) continue;\r\n\r\n                // If a duplicate is found, prevent it from being added and\r\n                // optionally merge it into the existing model.\r\n                if (existing = this.get(model)) {\r\n                    if (options.remove) modelMap[existing.cid] = true;\r\n                    if (options.merge) {\r\n                        existing.set(model.attributes, options);\r\n                        if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;\r\n                    }\r\n\r\n                    // This is a new model, push it to the `toAdd` list.\r\n                } else if (options.add) {\r\n                    toAdd.push(model);\r\n\r\n                    // Listen to added models' events, and index models for lookup by\r\n                    // `id` and by `cid`.\r\n                    model.on('all', this._onModelEvent, this);\r\n                    this._byId[model.cid] = model;\r\n                    if (model.id != null) this._byId[model.id] = model;\r\n                }\r\n            }\r\n\r\n            // Remove nonexistent models if appropriate.\r\n            if (options.remove) {\r\n                for (i = 0, l = this.length; i < l; ++i) {\r\n                    if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);\r\n                }\r\n                if (toRemove.length) this.remove(toRemove, options);\r\n            }\r\n\r\n            // See if sorting is needed, update `length` and splice in new models.\r\n            if (toAdd.length) {\r\n                if (sortable) sort = true;\r\n                this.length += toAdd.length;\r\n                if (at != null) {\r\n                    splice.apply(this.models, [at, 0].concat(toAdd));\r\n                } else {\r\n                    push.apply(this.models, toAdd);\r\n                }\r\n            }\r\n\r\n            // Silently sort the collection if appropriate.\r\n            if (sort) this.sort({silent: true});\r\n\r\n            if (options.silent) return this;\r\n\r\n            // Trigger `add` events.\r\n            for (i = 0, l = toAdd.length; i < l; i++) {\r\n                (model = toAdd[i]).trigger('add', model, this, options);\r\n            }\r\n\r\n            // Trigger `sort` if the collection was sorted.\r\n            if (sort) this.trigger('sort', this, options);\r\n            return this;\r\n        },\r\n\r\n        // When you have more items than you want to add or remove individually,\r\n        // you can reset the entire set with a new list of models, without firing\r\n        // any granular `add` or `remove` events. Fires `reset` when finished.\r\n        // Useful for bulk operations and optimizations.\r\n        reset: function(models, options) {\r\n            options || (options = {});\r\n            for (var i = 0, l = this.models.length; i < l; i++) {\r\n                this._removeReference(this.models[i]);\r\n            }\r\n            options.previousModels = this.models;\r\n            this._reset();\r\n            this.add(models, _.extend({silent: true}, options));\r\n            if (!options.silent) this.trigger('reset', this, options);\r\n            return this;\r\n        },\r\n\r\n        // Add a model to the end of the collection.\r\n        push: function(model, options) {\r\n            model = this._prepareModel(model, options);\r\n            this.add(model, _.extend({at: this.length}, options));\r\n            return model;\r\n        },\r\n\r\n        // Remove a model from the end of the collection.\r\n        pop: function(options) {\r\n            var model = this.at(this.length - 1);\r\n            this.remove(model, options);\r\n            return model;\r\n        },\r\n\r\n        // Add a model to the beginning of the collection.\r\n        unshift: function(model, options) {\r\n            model = this._prepareModel(model, options);\r\n            this.add(model, _.extend({at: 0}, options));\r\n            return model;\r\n        },\r\n\r\n        // Remove a model from the beginning of the collection.\r\n        shift: function(options) {\r\n            var model = this.at(0);\r\n            this.remove(model, options);\r\n            return model;\r\n        },\r\n\r\n        // Slice out a sub-array of models from the collection.\r\n        slice: function() {\r\n            return slice.apply(this.models, arguments);\r\n        },\r\n\r\n        // Get a model from the set by id.\r\n        get: function(obj) {\r\n            if (obj == null) return void 0;\r\n            return this._byId[obj.id != null ? obj.id : obj.cid || obj];\r\n        },\r\n\r\n        // Get the model at the given index.\r\n        at: function(index) {\r\n            return this.models[index];\r\n        },\r\n\r\n        // Return models with matching attributes. Useful for simple cases of\r\n        // `filter`.\r\n        where: function(attrs, first) {\r\n            if (_.isEmpty(attrs)) return first ? void 0 : [];\r\n            return this[first ? 'find' : 'filter'](function(model) {\r\n                for (var key in attrs) {\r\n                    if (attrs[key] !== model.get(key)) return false;\r\n                }\r\n                return true;\r\n            });\r\n        },\r\n\r\n        // Return the first model with matching attributes. Useful for simple cases\r\n        // of `find`.\r\n        findWhere: function(attrs) {\r\n            return this.where(attrs, true);\r\n        },\r\n\r\n        // Force the collection to re-sort itself. You don't need to call this under\r\n        // normal circumstances, as the set will maintain sort order as each item\r\n        // is added.\r\n        sort: function(options) {\r\n            if (!this.comparator) throw new Error('Cannot sort a set without a comparator');\r\n            options || (options = {});\r\n\r\n            // Run sort based on type of `comparator`.\r\n            if (_.isString(this.comparator) || this.comparator.length === 1) {\r\n                this.models = this.sortBy(this.comparator, this);\r\n            } else {\r\n                this.models.sort(_.bind(this.comparator, this));\r\n            }\r\n\r\n            if (!options.silent) this.trigger('sort', this, options);\r\n            return this;\r\n        },\r\n\r\n        // Figure out the smallest index at which a model should be inserted so as\r\n        // to maintain order.\r\n        sortedIndex: function(model, value, context) {\r\n            value || (value = this.comparator);\r\n            var iterator = _.isFunction(value) ? value : function(model) {\r\n                return model.get(value);\r\n            };\r\n            return _.sortedIndex(this.models, model, iterator, context);\r\n        },\r\n\r\n        // Pluck an attribute from each model in the collection.\r\n        pluck: function(attr) {\r\n            return _.invoke(this.models, 'get', attr);\r\n        },\r\n\r\n        // Fetch the default set of models for this collection, resetting the\r\n        // collection when they arrive. If `reset: true` is passed, the response\r\n        // data will be passed through the `reset` method instead of `set`.\r\n        fetch: function(options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (options.parse === void 0) options.parse = true;\r\n            var success = options.success;\r\n            var collection = this;\r\n            options.success = function(resp) {\r\n                var method = options.reset ? 'reset' : 'set';\r\n                collection[method](resp, options);\r\n                if (success) success(collection, resp, options);\r\n                collection.trigger('sync', collection, resp, options);\r\n            };\r\n            wrapError(this, options);\r\n            return this.sync('read', this, options);\r\n        },\r\n\r\n        // Create a new instance of a model in this collection. Add the model to the\r\n        // collection immediately, unless `wait: true` is passed, in which case we\r\n        // wait for the server to agree.\r\n        create: function(model, options) {\r\n            options = options ? _.clone(options) : {};\r\n            if (!(model = this._prepareModel(model, options))) return false;\r\n            if (!options.wait) this.add(model, options);\r\n            var collection = this;\r\n            var success = options.success;\r\n            options.success = function(resp) {\r\n                if (options.wait) collection.add(model, options);\r\n                if (success) success(model, resp, options);\r\n            };\r\n            model.save(null, options);\r\n            return model;\r\n        },\r\n\r\n        // **parse** converts a response into a list of models to be added to the\r\n        // collection. The default implementation is just to pass it through.\r\n        parse: function(resp, options) {\r\n            return resp;\r\n        },\r\n\r\n        // Create a new collection with an identical list of models as this one.\r\n        clone: function() {\r\n            return new this.constructor(this.models);\r\n        },\r\n\r\n        // Private method to reset all internal state. Called when the collection\r\n        // is first initialized or reset.\r\n        _reset: function() {\r\n            this.length = 0;\r\n            this.models = [];\r\n            this._byId  = {};\r\n        },\r\n\r\n        // Prepare a hash of attributes (or other model) to be added to this\r\n        // collection.\r\n        _prepareModel: function(attrs, options) {\r\n            if (attrs instanceof Model) {\r\n                if (!attrs.collection) attrs.collection = this;\r\n                return attrs;\r\n            }\r\n            options || (options = {});\r\n            options.collection = this;\r\n            var model = new this.model(attrs, options);\r\n            if (!model._validate(attrs, options)) {\r\n                this.trigger('invalid', this, attrs, options);\r\n                return false;\r\n            }\r\n            return model;\r\n        },\r\n\r\n        // Internal method to sever a model's ties to a collection.\r\n        _removeReference: function(model) {\r\n            if (this === model.collection) delete model.collection;\r\n            model.off('all', this._onModelEvent, this);\r\n        },\r\n\r\n        // Internal method called every time a model in the set fires an event.\r\n        // Sets need to update their indexes when models change ids. All other\r\n        // events simply proxy through. \"add\" and \"remove\" events that originate\r\n        // in other collections are ignored.\r\n        _onModelEvent: function(event, model, collection, options) {\r\n            if ((event === 'add' || event === 'remove') && collection !== this) return;\r\n            if (event === 'destroy') this.remove(model, options);\r\n            if (model && event === 'change:' + model.idAttribute) {\r\n                delete this._byId[model.previous(model.idAttribute)];\r\n                if (model.id != null) this._byId[model.id] = model;\r\n            }\r\n            this.trigger.apply(this, arguments);\r\n        }\r\n\r\n    });\r\n\r\n    // Underscore methods that we want to implement on the Collection.\r\n    // 90% of the core usefulness of Backbone Collections is actually implemented\r\n    // right here:\r\n    var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',\r\n        'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',\r\n        'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',\r\n        'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',\r\n        'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf',\r\n        'isEmpty', 'chain'];\r\n\r\n    // Mix in each Underscore method as a proxy to `Collection#models`.\r\n    _.each(methods, function(method) {\r\n        Collection.prototype[method] = function() {\r\n            var args = slice.call(arguments);\r\n            args.unshift(this.models);\r\n            return _[method].apply(_, args);\r\n        };\r\n    });\r\n\r\n    // Underscore methods that take a property name as an argument.\r\n    var attributeMethods = ['groupBy', 'countBy', 'sortBy'];\r\n\r\n    // Use attributes instead of properties.\r\n    _.each(attributeMethods, function(method) {\r\n        Collection.prototype[method] = function(value, context) {\r\n            var iterator = _.isFunction(value) ? value : function(model) {\r\n                return model.get(value);\r\n            };\r\n            return _[method](this.models, iterator, context);\r\n        };\r\n    });\r\n\r\n    // Backbone.View\r\n    // -------------\r\n\r\n    // Backbone Views are almost more convention than they are actual code. A View\r\n    // is simply a JavaScript object that represents a logical chunk of UI in the\r\n    // DOM. This might be a single item, an entire list, a sidebar or panel, or\r\n    // even the surrounding frame which wraps your whole app. Defining a chunk of\r\n    // UI as a **View** allows you to define your DOM events declaratively, without\r\n    // having to worry about render order ... and makes it easy for the view to\r\n    // react to specific changes in the state of your models.\r\n\r\n    // Creating a Backbone.View creates its initial element outside of the DOM,\r\n    // if an existing element is not provided...\r\n    var View = Backbone.View = function(options) {\r\n        this.cid = _.uniqueId('view');\r\n        this._configure(options || {});\r\n        this._ensureElement();\r\n        this.initialize.apply(this, arguments);\r\n        this.delegateEvents();\r\n    };\r\n\r\n    // Cached regex to split keys for `delegate`.\r\n    var delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\r\n\r\n    // List of view options to be merged as properties.\r\n    var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];\r\n\r\n    // Set up all inheritable **Backbone.View** properties and methods.\r\n    _.extend(View.prototype, Events, {\r\n\r\n        // The default `tagName` of a View's element is `\"div\"`.\r\n        tagName: 'div',\r\n\r\n        // jQuery delegate for element lookup, scoped to DOM elements within the\r\n        // current view. This should be prefered to global lookups where possible.\r\n        $: function(selector) {\r\n            return this.$el.find(selector);\r\n        },\r\n\r\n        // Initialize is an empty function by default. Override it with your own\r\n        // initialization logic.\r\n        initialize: function(){},\r\n\r\n        // **render** is the core function that your view should override, in order\r\n        // to populate its element (`this.el`), with the appropriate HTML. The\r\n        // convention is for **render** to always return `this`.\r\n        render: function() {\r\n            return this;\r\n        },\r\n\r\n        // Remove this view by taking the element out of the DOM, and removing any\r\n        // applicable Backbone.Events listeners.\r\n        remove: function() {\r\n            this.$el.remove();\r\n            this.stopListening();\r\n            return this;\r\n        },\r\n\r\n        // Change the view's element (`this.el` property), including event\r\n        // re-delegation.\r\n        setElement: function(element, delegate) {\r\n            if (this.$el) this.undelegateEvents();\r\n            this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);\r\n            this.el = this.$el[0];\r\n            if (delegate !== false) this.delegateEvents();\r\n            return this;\r\n        },\r\n\r\n        // Set callbacks, where `this.events` is a hash of\r\n        //\r\n        // *{\"event selector\": \"callback\"}*\r\n        //\r\n        //     {\r\n        //       'mousedown .title':  'edit',\r\n        //       'click .button':     'save'\r\n        //       'click .open':       function(e) { ... }\r\n        //     }\r\n        //\r\n        // pairs. Callbacks will be bound to the view, with `this` set properly.\r\n        // Uses event delegation for efficiency.\r\n        // Omitting the selector binds the event to `this.el`.\r\n        // This only works for delegate-able events: not `focus`, `blur`, and\r\n        // not `change`, `submit`, and `reset` in Internet Explorer.\r\n        delegateEvents: function(events) {\r\n            if (!(events || (events = _.result(this, 'events')))) return this;\r\n            this.undelegateEvents();\r\n            for (var key in events) {\r\n                var method = events[key];\r\n                if (!_.isFunction(method)) method = this[events[key]];\r\n                if (!method) continue;\r\n\r\n                var match = key.match(delegateEventSplitter);\r\n                var eventName = match[1], selector = match[2];\r\n                method = _.bind(method, this);\r\n                eventName += '.delegateEvents' + this.cid;\r\n                if (selector === '') {\r\n                    this.$el.on(eventName, method);\r\n                } else {\r\n                    this.$el.on(eventName, selector, method);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n\r\n        // Clears all callbacks previously bound to the view with `delegateEvents`.\r\n        // You usually don't need to use this, but may wish to if you have multiple\r\n        // Backbone views attached to the same DOM element.\r\n        undelegateEvents: function() {\r\n            this.$el.off('.delegateEvents' + this.cid);\r\n            return this;\r\n        },\r\n\r\n        // Performs the initial configuration of a View with a set of options.\r\n        // Keys with special meaning *(e.g. model, collection, id, className)* are\r\n        // attached directly to the view.  See `viewOptions` for an exhaustive\r\n        // list.\r\n        _configure: function(options) {\r\n            if (this.options) options = _.extend({}, _.result(this, 'options'), options);\r\n            _.extend(this, _.pick(options, viewOptions));\r\n            this.options = options;\r\n        },\r\n\r\n        // Ensure that the View has a DOM element to render into.\r\n        // If `this.el` is a string, pass it through `$()`, take the first\r\n        // matching element, and re-assign it to `el`. Otherwise, create\r\n        // an element from the `id`, `className` and `tagName` properties.\r\n        _ensureElement: function() {\r\n            if (!this.el) {\r\n                var attrs = _.extend({}, _.result(this, 'attributes'));\r\n                if (this.id) attrs.id = _.result(this, 'id');\r\n                if (this.className) attrs['class'] = _.result(this, 'className');\r\n                var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);\r\n                this.setElement($el, false);\r\n            } else {\r\n                this.setElement(_.result(this, 'el'), false);\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    // Backbone.sync\r\n    // -------------\r\n\r\n    // Override this function to change the manner in which Backbone persists\r\n    // models to the server. You will be passed the type of request, and the\r\n    // model in question. By default, makes a RESTful Ajax request\r\n    // to the model's `url()`. Some possible customizations could be:\r\n    //\r\n    // * Use `setTimeout` to batch rapid-fire updates into a single request.\r\n    // * Send up the models as XML instead of JSON.\r\n    // * Persist models via WebSockets instead of Ajax.\r\n    //\r\n    // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\r\n    // as `POST`, with a `_method` parameter containing the true HTTP method,\r\n    // as well as all requests with the body as `application/x-www-form-urlencoded`\r\n    // instead of `application/json` with the model in a param named `model`.\r\n    // Useful when interfacing with server-side languages like **PHP** that make\r\n    // it difficult to read the body of `PUT` requests.\r\n    Backbone.sync = function(method, model, options) {\r\n        var type = methodMap[method];\r\n\r\n        // Default options, unless specified.\r\n        _.defaults(options || (options = {}), {\r\n            emulateHTTP: Backbone.emulateHTTP,\r\n            emulateJSON: Backbone.emulateJSON\r\n        });\r\n\r\n        // Default JSON-request options.\r\n        var params = {type: type, dataType: 'json'};\r\n\r\n        // Ensure that we have a URL.\r\n        if (!options.url) {\r\n            params.url = _.result(model, 'url') || urlError();\r\n        }\r\n\r\n        // Ensure that we have the appropriate request data.\r\n        if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {\r\n            params.contentType = 'application/json';\r\n            params.data = JSON.stringify(options.attrs || model.toJSON(options));\r\n        }\r\n\r\n        // For older servers, emulate JSON by encoding the request into an HTML-form.\r\n        if (options.emulateJSON) {\r\n            params.contentType = 'application/x-www-form-urlencoded';\r\n            params.data = params.data ? {model: params.data} : {};\r\n        }\r\n\r\n        // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\r\n        // And an `X-HTTP-Method-Override` header.\r\n        if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {\r\n            params.type = 'POST';\r\n            if (options.emulateJSON) params.data._method = type;\r\n            var beforeSend = options.beforeSend;\r\n            options.beforeSend = function(xhr) {\r\n                xhr.setRequestHeader('X-HTTP-Method-Override', type);\r\n                if (beforeSend) return beforeSend.apply(this, arguments);\r\n            };\r\n        }\r\n\r\n        // Don't process data on a non-GET request.\r\n        if (params.type !== 'GET' && !options.emulateJSON) {\r\n            params.processData = false;\r\n        }\r\n\r\n        // If we're sending a `PATCH` request, and we're in an old Internet Explorer\r\n        // that still has ActiveX enabled by default, override jQuery to use that\r\n        // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.\r\n        if (params.type === 'PATCH' && window.ActiveXObject &&\r\n            !(window.external && window.external.msActiveXFilteringEnabled)) {\r\n            params.xhr = function() {\r\n                return new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n            };\r\n        }\r\n\r\n        // Make the request, allowing the user to override any Ajax options.\r\n        var xhr = options.xhr = Backbone.ajax(_.extend(params, options));\r\n        model.trigger('request', model, xhr, options);\r\n        return xhr;\r\n    };\r\n\r\n    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.\r\n    var methodMap = {\r\n        'create': 'POST',\r\n        'update': 'PUT',\r\n        'patch':  'PATCH',\r\n        'delete': 'DELETE',\r\n        'read':   'GET'\r\n    };\r\n\r\n    // Set the default implementation of `Backbone.ajax` to proxy through to `$`.\r\n    // Override this if you'd like to use a different library.\r\n    Backbone.ajax = function() {\r\n        return Backbone.$.ajax.apply(Backbone.$, arguments);\r\n    };\r\n\r\n    // Backbone.Router\r\n    // ---------------\r\n\r\n    // Routers map faux-URLs to actions, and fire events when routes are\r\n    // matched. Creating a new one sets its `routes` hash, if not set statically.\r\n    var Router = Backbone.Router = function(options) {\r\n        options || (options = {});\r\n        if (options.routes) this.routes = options.routes;\r\n        this._bindRoutes();\r\n        this.initialize.apply(this, arguments);\r\n    };\r\n\r\n    // Cached regular expressions for matching named param parts and splatted\r\n    // parts of route strings.\r\n    var optionalParam = /\\((.*?)\\)/g;\r\n    var namedParam    = /(\\(\\?)?:\\w+/g;\r\n    var splatParam    = /\\*\\w+/g;\r\n    var escapeRegExp  = /[\\-{}\\[\\]+?.,\\\\\\^$|#\\s]/g;\r\n\r\n    // Set up all inheritable **Backbone.Router** properties and methods.\r\n    _.extend(Router.prototype, Events, {\r\n\r\n        // Initialize is an empty function by default. Override it with your own\r\n        // initialization logic.\r\n        initialize: function(){},\r\n\r\n        // Manually bind a single named route to a callback. For example:\r\n        //\r\n        //     this.route('search/:query/p:num', 'search', function(query, num) {\r\n        //       ...\r\n        //     });\r\n        //\r\n        route: function(route, name, callback) {\r\n            if (!_.isRegExp(route)) route = this._routeToRegExp(route);\r\n            if (_.isFunction(name)) {\r\n                callback = name;\r\n                name = '';\r\n            }\r\n            if (!callback) callback = this[name];\r\n            var router = this;\r\n            Backbone.history.route(route, function(fragment) {\r\n                var args = router._extractParameters(route, fragment);\r\n                callback && callback.apply(router, args);\r\n                router.trigger.apply(router, ['route:' + name].concat(args));\r\n                router.trigger('route', name, args);\r\n                Backbone.history.trigger('route', router, name, args);\r\n            });\r\n            return this;\r\n        },\r\n\r\n        // Simple proxy to `Backbone.history` to save a fragment into the history.\r\n        navigate: function(fragment, options) {\r\n            Backbone.history.navigate(fragment, options);\r\n            return this;\r\n        },\r\n\r\n        // Bind all defined routes to `Backbone.history`. We have to reverse the\r\n        // order of the routes here to support behavior where the most general\r\n        // routes can be defined at the bottom of the route map.\r\n        _bindRoutes: function() {\r\n            if (!this.routes) return;\r\n            this.routes = _.result(this, 'routes');\r\n            var route, routes = _.keys(this.routes);\r\n            while ((route = routes.pop()) != null) {\r\n                this.route(route, this.routes[route]);\r\n            }\r\n        },\r\n\r\n        // Convert a route string into a regular expression, suitable for matching\r\n        // against the current location hash.\r\n        _routeToRegExp: function(route) {\r\n            route = route.replace(escapeRegExp, '\\\\$&')\r\n                .replace(optionalParam, '(?:$1)?')\r\n                .replace(namedParam, function(match, optional){\r\n                    return optional ? match : '([^\\/]+)';\r\n                })\r\n                .replace(splatParam, '(.*?)');\r\n            return new RegExp('^' + route + '$');\r\n        },\r\n\r\n        // Given a route, and a URL fragment that it matches, return the array of\r\n        // extracted decoded parameters. Empty or unmatched parameters will be\r\n        // treated as `null` to normalize cross-browser behavior.\r\n        _extractParameters: function(route, fragment) {\r\n            var params = route.exec(fragment).slice(1);\r\n            return _.map(params, function(param) {\r\n                return param ? decodeURIComponent(param) : null;\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    // Backbone.History\r\n    // ----------------\r\n\r\n    // Handles cross-browser history management, based on either\r\n    // [pushState](http://diveintohtml5.info/history.html) and real URLs, or\r\n    // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)\r\n    // and URL fragments. If the browser supports neither (old IE, natch),\r\n    // falls back to polling.\r\n    var History = Backbone.History = function() {\r\n        this.handlers = [];\r\n        _.bindAll(this, 'checkUrl');\r\n\r\n        // Ensure that `History` can be used outside of the browser.\r\n        if (typeof window !== 'undefined') {\r\n            this.location = window.location;\r\n            this.history = window.history;\r\n        }\r\n    };\r\n\r\n    // Cached regex for stripping a leading hash/slash and trailing space.\r\n    var routeStripper = /^[#\\/]|\\s+$/g;\r\n\r\n    // Cached regex for stripping leading and trailing slashes.\r\n    var rootStripper = /^\\/+|\\/+$/g;\r\n\r\n    // Cached regex for detecting MSIE.\r\n    var isExplorer = /msie [\\w.]+/;\r\n\r\n    // Cached regex for removing a trailing slash.\r\n    var trailingSlash = /\\/$/;\r\n\r\n    // Has the history handling already been started?\r\n    History.started = false;\r\n\r\n    // Set up all inheritable **Backbone.History** properties and methods.\r\n    _.extend(History.prototype, Events, {\r\n\r\n        // The default interval to poll for hash changes, if necessary, is\r\n        // twenty times a second.\r\n        interval: 50,\r\n\r\n        // Gets the true hash value. Cannot use location.hash directly due to bug\r\n        // in Firefox where location.hash will always be decoded.\r\n        getHash: function(window) {\r\n            var match = (window || this).location.href.match(/#(.*)$/);\r\n            return match ? match[1] : '';\r\n        },\r\n\r\n        // Get the cross-browser normalized URL fragment, either from the URL,\r\n        // the hash, or the override.\r\n        getFragment: function(fragment, forcePushState) {\r\n            if (fragment == null) {\r\n                if (this._hasPushState || !this._wantsHashChange || forcePushState) {\r\n                    fragment = this.location.pathname;\r\n                    var root = this.root.replace(trailingSlash, '');\r\n                    if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);\r\n                } else {\r\n                    fragment = this.getHash();\r\n                }\r\n            }\r\n            return fragment.replace(routeStripper, '');\r\n        },\r\n\r\n        // Start the hash change handling, returning `true` if the current URL matches\r\n        // an existing route, and `false` otherwise.\r\n        start: function(options) {\r\n            if (History.started) throw new Error(\"Backbone.history has already been started\");\r\n            History.started = true;\r\n\r\n            // Figure out the initial configuration. Do we need an iframe?\r\n            // Is pushState desired ... is it available?\r\n            this.options          = _.extend({}, {root: '/'}, this.options, options);\r\n            this.root             = this.options.root;\r\n            this._wantsHashChange = this.options.hashChange !== false;\r\n            this._wantsPushState  = !!this.options.pushState;\r\n            this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);\r\n            var fragment          = this.getFragment();\r\n            var docMode           = document.documentMode;\r\n            var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\r\n\r\n            // Normalize root to always include a leading and trailing slash.\r\n            this.root = ('/' + this.root + '/').replace(rootStripper, '/');\r\n\r\n            if (oldIE && this._wantsHashChange) {\r\n                this.iframe = Backbone.$('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\r\n                this.navigate(fragment);\r\n            }\r\n\r\n            // Depending on whether we're using pushState or hashes, and whether\r\n            // 'onhashchange' is supported, determine how we check the URL state.\r\n            if (this._hasPushState) {\r\n                Backbone.$(window).on('popstate', this.checkUrl);\r\n            } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\r\n                Backbone.$(window).on('hashchange', this.checkUrl);\r\n            } else if (this._wantsHashChange) {\r\n                this._checkUrlInterval = setInterval(this.checkUrl, this.interval);\r\n            }\r\n\r\n            // Determine if we need to change the base url, for a pushState link\r\n            // opened by a non-pushState browser.\r\n            this.fragment = fragment;\r\n            var loc = this.location;\r\n            var atRoot = loc.pathname.replace(/[^\\/]$/, '$&/') === this.root;\r\n\r\n            // If we've started off with a route from a `pushState`-enabled browser,\r\n            // but we're currently in a browser that doesn't support it...\r\n            if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {\r\n                this.fragment = this.getFragment(null, true);\r\n                this.location.replace(this.root + this.location.search + '#' + this.fragment);\r\n                // Return immediately as browser will do redirect to new url\r\n                return true;\r\n\r\n                // Or if we've started out with a hash-based route, but we're currently\r\n                // in a browser where it could be `pushState`-based instead...\r\n            } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {\r\n                this.fragment = this.getHash().replace(routeStripper, '');\r\n                this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);\r\n            }\r\n\r\n            if (!this.options.silent) return this.loadUrl();\r\n        },\r\n\r\n        // Disable Backbone.history, perhaps temporarily. Not useful in a real app,\r\n        // but possibly useful for unit testing Routers.\r\n        stop: function() {\r\n            Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);\r\n            clearInterval(this._checkUrlInterval);\r\n            History.started = false;\r\n        },\r\n\r\n        // Add a route to be tested when the fragment changes. Routes added later\r\n        // may override previous routes.\r\n        route: function(route, callback) {\r\n            this.handlers.unshift({route: route, callback: callback});\r\n        },\r\n\r\n        // Checks the current URL to see if it has changed, and if it has,\r\n        // calls `loadUrl`, normalizing across the hidden iframe.\r\n        checkUrl: function(e) {\r\n            var current = this.getFragment();\r\n            if (current === this.fragment && this.iframe) {\r\n                current = this.getFragment(this.getHash(this.iframe));\r\n            }\r\n            if (current === this.fragment) return false;\r\n            if (this.iframe) this.navigate(current);\r\n            this.loadUrl() || this.loadUrl(this.getHash());\r\n        },\r\n\r\n        // Attempt to load the current URL fragment. If a route succeeds with a\r\n        // match, returns `true`. If no defined routes matches the fragment,\r\n        // returns `false`.\r\n        loadUrl: function(fragmentOverride) {\r\n            var fragment = this.fragment = this.getFragment(fragmentOverride);\r\n            var matched = _.any(this.handlers, function(handler) {\r\n                if (handler.route.test(fragment)) {\r\n                    handler.callback(fragment);\r\n                    return true;\r\n                }\r\n            });\r\n            return matched;\r\n        },\r\n\r\n        // Save a fragment into the hash history, or replace the URL state if the\r\n        // 'replace' option is passed. You are responsible for properly URL-encoding\r\n        // the fragment in advance.\r\n        //\r\n        // The options object can contain `trigger: true` if you wish to have the\r\n        // route callback be fired (not usually desirable), or `replace: true`, if\r\n        // you wish to modify the current URL without adding an entry to the history.\r\n        navigate: function(fragment, options) {\r\n            if (!History.started) return false;\r\n            if (!options || options === true) options = {trigger: options};\r\n            fragment = this.getFragment(fragment || '');\r\n            if (this.fragment === fragment) return;\r\n            this.fragment = fragment;\r\n            var url = this.root + fragment;\r\n\r\n            // If pushState is available, we use it to set the fragment as a real URL.\r\n            if (this._hasPushState) {\r\n                this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);\r\n\r\n                // If hash changes haven't been explicitly disabled, update the hash\r\n                // fragment to store history.\r\n            } else if (this._wantsHashChange) {\r\n                this._updateHash(this.location, fragment, options.replace);\r\n                if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {\r\n                    // Opening and closing the iframe tricks IE7 and earlier to push a\r\n                    // history entry on hash-tag change.  When replace is true, we don't\r\n                    // want this.\r\n                    if(!options.replace) this.iframe.document.open().close();\r\n                    this._updateHash(this.iframe.location, fragment, options.replace);\r\n                }\r\n\r\n                // If you've told us that you explicitly don't want fallback hashchange-\r\n                // based history, then `navigate` becomes a page refresh.\r\n            } else {\r\n                return this.location.assign(url);\r\n            }\r\n            if (options.trigger) this.loadUrl(fragment);\r\n        },\r\n\r\n        // Update the hash location, either replacing the current entry, or adding\r\n        // a new one to the browser history.\r\n        _updateHash: function(location, fragment, replace) {\r\n            if (replace) {\r\n                var href = location.href.replace(/(javascript:|#).*$/, '');\r\n                location.replace(href + '#' + fragment);\r\n            } else {\r\n                // Some browsers require that `hash` contains a leading #.\r\n                location.hash = '#' + fragment;\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    // Create the default Backbone.history.\r\n    Backbone.history = new History;\r\n\r\n    // Helpers\r\n    // -------\r\n\r\n    // Helper function to correctly set up the prototype chain, for subclasses.\r\n    // Similar to `goog.inherits`, but uses a hash of prototype properties and\r\n    // class properties to be extended.\r\n    var extend = function(protoProps, staticProps) {\r\n        var parent = this;\r\n        var child;\r\n\r\n        // The constructor function for the new subclass is either defined by you\r\n        // (the \"constructor\" property in your `extend` definition), or defaulted\r\n        // by us to simply call the parent's constructor.\r\n        if (protoProps && _.has(protoProps, 'constructor')) {\r\n            child = protoProps.constructor;\r\n        } else {\r\n            child = function(){ return parent.apply(this, arguments); };\r\n        }\r\n\r\n        // Add static properties to the constructor function, if supplied.\r\n        _.extend(child, parent, staticProps);\r\n\r\n        // Set the prototype chain to inherit from `parent`, without calling\r\n        // `parent`'s constructor function.\r\n        var Surrogate = function(){ this.constructor = child; };\r\n        Surrogate.prototype = parent.prototype;\r\n        child.prototype = new Surrogate;\r\n\r\n        // Add prototype properties (instance properties) to the subclass,\r\n        // if supplied.\r\n        if (protoProps) _.extend(child.prototype, protoProps);\r\n\r\n        // Set a convenience property in case the parent's prototype is needed\r\n        // later.\r\n        child.__super__ = parent.prototype;\r\n\r\n        return child;\r\n    };\r\n\r\n    // Set up inheritance for the model, collection, router, view and history.\r\n    Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;\r\n\r\n    // Throw an error when a URL is needed, and none is supplied.\r\n    var urlError = function() {\r\n        throw new Error('A \"url\" property or function must be specified');\r\n    };\r\n\r\n    // Wrap an optional error callback with a fallback error event.\r\n    var wrapError = function (model, options) {\r\n        var error = options.error;\r\n        options.error = function(resp) {\r\n            if (error) error(model, resp, options);\r\n            model.trigger('error', model, resp, options);\r\n        };\r\n    };\r\n\r\n}).call(this);\r\n"]}