{"version":3,"sources":["assets/lib/backbone/backbone.localStorage.js"],"names":["String","prototype","En3DexCode","str","this","valueOf","App","encryptWith3DES","De3DexCode","decryptBy3DES","_","Backbone","S4","Math","random","toString","substring","guid","LocalStorage","window","Store","name","NS","extend","repairStorage","store","localStorage","getItem","records","split","save","setItem","join","create","model","id","set","idAttribute","update","JSON","stringify","contains","push","toJSON","find","Model","result","isEmpty","destroy","parse","ex","SyntaxError","findAll","filter","ids","offset","slice","limit","chain","map","compact","value","removeItem","reject","record_id","total","length","repair_key","count","key","indexOf","substr","sync","localSync","method","options","resp","collection","syncDfd","$","Deferred","undefined","success","resolve","error","promise","ajaxSync","getSyncMethod","apply"],"mappings":"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","file":"backbone.localStorage.js","sourcesContent":["//展业项目信用卡本地localstorage 3dex加密\r\n//安卓设备加密，非安卓设备不加密\r\nString.prototype.En3DexCode = function(){\r\n    var str = this.valueOf();\r\n    return (App.encryptWith3DES(str)) || str;\r\n}\r\n//展业项目信用卡本地localstorage 3dex解密\r\n//安卓设备解密，非安卓设备不解密\r\nString.prototype.De3DexCode = function(){\r\n    var str = this.valueOf();\r\n    return ( App.decryptBy3DES(str) ) || str;\r\n};\r\n/**\r\n * Backbone localStorage Adapter\r\n * https://github.com/jeromegn/Backbone.localStorage\r\n */\r\n\r\n(function (_, Backbone) {\r\n// A simple module to replace `Backbone.sync` with *localStorage*-based\r\n// persistence. Models are given GUIDS, and saved into a JSON object. Simple\r\n// as that.\r\n\r\n// Hold reference to Underscore.js and Backbone.js in the closure in order\r\n// to make things work even if they are removed from the global namespace\r\n\r\n// Generate four random hex digits.\r\n    function S4() {\r\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n\r\n// Generate a pseudo-GUID by concatenating random hexadecimal.\r\n    function guid() {\r\n        return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\r\n    };\r\n\r\n// Our Store is represented by a single JS object in *localStorage*. Create it\r\n// with a meaningful name, like the name you'd give a table.\r\n// window.Store is deprectated, use Backbone.LocalStorage instead\r\n    Backbone.LocalStorage = window.Store = function (name) {\r\n        this.NS(name);\r\n    };\r\n\r\n    _.extend(Backbone.LocalStorage.prototype, {\r\n        //switch to new namespace\r\n        NS: function(name){\r\n            this.name = name;\r\n            this.repairStorage(name);\r\n            var store = this.localStorage().getItem(this.name);\r\n            this.records = (store && store.split(\",\")) || [];\r\n            return this;\r\n        },\r\n\r\n        // Save the current state of the **Store** to *localStorage*.\r\n        save: function () {\r\n            this.localStorage().setItem(this.name, this.records.join(\",\"));\r\n            return this;\r\n        },\r\n\r\n        // Add a model, giving it a (hopefully)-unique GUID, if it doesn't already\r\n        // have an id of it's own.\r\n        create: function (model) {\r\n            if (!model.id) {\r\n                model.id = guid();\r\n                model.set(model.idAttribute, model.id);\r\n                //return false;\r\n            } else {\r\n            }\r\n            return this.update(model);\r\n        },\r\n\r\n        // Update a model by replacing its copy in `this.data`.\r\n        update: function (model) {\r\n            this.localStorage().setItem( this.name+\"-\"+model.id, JSON.stringify(model).En3DexCode() );\r\n            if ( !_.contains(this.records, model.id.toString()) ) this.records.push(model.id.toString());\r\n            this.save();\r\n            return model.toJSON();\r\n        },\r\n\r\n        // Retrieve a model from `this.data` by id.\r\n        find: function (model) {\r\n            this.NS(this.name);\r\n            var id = model instanceof Backbone.Model ? model.id : String(model),\r\n                result = this.localStorage().getItem(this.name+\"-\"+ id );\r\n\r\n            if ( _.isEmpty(result) ) {\r\n                this.destroy(model);\r\n                return null;\r\n            }\r\n\r\n            try {\r\n                try {\r\n                    result = JSON.parse( result.De3DexCode() );//尝试解析密文\r\n                } catch (ex) {\r\n                    if (ex instanceof SyntaxError)\r\n                        result = JSON.parse( result );//解析明文\r\n                    else\r\n                        throw ex;\r\n                }\r\n            } catch (ex) {\r\n                return null;\r\n            }\r\n\r\n            return result;\r\n        },\r\n\r\n        // Return the array of all models currently in storage.\r\n        findAll: function (filter) {\r\n            this.NS(this.name);\r\n            var records = [];\r\n            var filter = filter || {};\r\n            records = filter.ids || this.records;\r\n            if (typeof filter.offset != 'undefined' && filter.offset >= 0) {\r\n                records = records.slice(filter.offset, filter.offset + filter.limit || 15);\r\n            }\r\n\r\n            return _(records).chain()\r\n                .map(function (id) {\r\n                    return this.find(id);\r\n                }, this)\r\n                .compact()\r\n                .value();\r\n        },\r\n\r\n        // Delete a model from `this.data`, returning it.\r\n        destroy: function (model) {\r\n            var id = model instanceof Backbone.Model ? model.id : String(model);\r\n            this.localStorage().removeItem(this.name + \"-\" + id);\r\n            this.records = _.reject(this.records, function (record_id) {\r\n                return record_id == id.toString();\r\n            });\r\n            this.save();\r\n            return model;\r\n        },\r\n\r\n        localStorage: function () {\r\n            return localStorage;\r\n        },\r\n\r\n        total: function(){\r\n            return this.records.length;\r\n        },\r\n        repairStorage : function(name){\r\n            if (!name) return;\r\n            var repair_key = \"\";\r\n            var count = 0;\r\n            for (var key in window.localStorage)\r\n            {\r\n                if (key.indexOf(name) != -1)\r\n                {\r\n                    if (count != 0)\r\n                    {\r\n                        repair_key += (\",\" + key.substr(name.length+1));\r\n                    }\r\n                    else\r\n                    {\r\n                        repair_key += key.substr(name.length+1);\r\n                    }\r\n                    count ++;\r\n                }\r\n            }\r\n            window.localStorage.setItem(name, repair_key);\r\n        }\r\n    });\r\n\r\n// localSync delegate to the model or collection's\r\n// *localStorage* property, which should be an instance of `Store`.\r\n// window.Store.sync and Backbone.localSync is deprectated, use Backbone.LocalStorage.sync instead\r\n    Backbone.LocalStorage.sync = window.Store.sync = Backbone.localSync = function (method, model, options) {\r\n        var store = model.localStorage || model.collection.localStorage;\r\n\r\n        var resp, syncDfd = $.Deferred && $.Deferred(); //If $ is having Deferred - use it.\r\n\r\n        switch (method) {\r\n            case \"read\":\r\n                resp = model.id != undefined ? store.find(model) : store.findAll(options);\r\n                break;\r\n            case \"create\":\r\n                resp = store.create(model);\r\n                break;\r\n            case \"update\":\r\n                resp = store.update(model);\r\n                break;\r\n            case \"delete\":\r\n                resp = store.destroy(model);\r\n                break;\r\n        }\r\n\r\n        if (resp) {\r\n            if (options && options.success) options.success(resp);\r\n            if (syncDfd) syncDfd.resolve();\r\n        } else {\r\n            if (options && options.error) options.error(\"数据无法创建\");\r\n            if (syncDfd) syncDfd.reject();\r\n        }\r\n\r\n        return syncDfd && syncDfd.promise();\r\n    };\r\n\r\n    Backbone.ajaxSync = Backbone.sync;\r\n\r\n    Backbone.getSyncMethod = function (model) {\r\n        if (model.localStorage || (model.collection && model.collection.localStorage)) {\r\n            return Backbone.localSync;\r\n        }\r\n\r\n        return Backbone.ajaxSync;\r\n    };\r\n\r\n// Override 'Backbone.sync' to default to localSync,\r\n// the original 'Backbone.sync' is still available in 'Backbone.ajaxSync'\r\n    Backbone.sync = function (method, model, options) {\r\n        return Backbone.getSyncMethod(model).apply(this, [method, model, options]);\r\n    };\r\n\r\n})(_, Backbone);\r\n"]}