{"version":3,"sources":["assets/lib/PAWA/PAWAView.js"],"names":["define","PAWA","Backbone","PAWAView","View","extend","name","controller","initialize","options","__super__","apply","this","arguments","top","parent","children","childrenAsName","childrenAsEl","awaitChildren","__recordLog__","init","show","$el","hide","addChild","el","view","await","$node","find","length","append","push","undefined","renderChildren","child","i","len","clearAwaitChildren","getChildByName","getChildsByEl","getChildren","_destroyChild","type","value","childName","childEl","childValue","destroy","destroyChildByName","destroyChildByEl","destroyChilds","splice","remove","undelegateEvents","model","shareViews","_shareList","add","get","shareList"],"mappings":"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","file":"PAWAView.js","sourcesContent":["/**\r\n * 重载Backbone.View\r\n */\r\ndefine(['PAWA', 'backbone'], function(PAWA, Backbone) {\r\n    var PAWAView = PAWA.PAWAView = Backbone.View.extend({\r\n        // 用于视图关联时的标识\r\n        name : '',\r\n        // 视图所引用的Controller\r\n        controller : null,\r\n        initialize : function(options) {\r\n        \tPAWAView.__super__.initialize.apply(this, arguments);\r\n            if(options) {\r\n                this.controller = options.controller;\r\n                this.top = options.top;\t\t\t//最顶层的视图对象\r\n                this.parent = options.parent;\t//父层的视图对象\r\n            }\r\n            // 存放所有子视图对象\r\n           \tthis.children = [],\r\n\t        // 根据名称存放所有子视图对象\r\n\t        this.childrenAsName = {},\r\n        \t// 根据表达式存放所有子视图列表\r\n        \tthis.childrenAsEl = {},\r\n        \t// 等待加入到视图中的子视图对象列表\r\n        \tthis.awaitChildren = [],\r\n        \tthis.__recordLog__();\r\n            this.init.apply(this, arguments);\r\n        },\r\n        init : function(options) {\r\n        },\r\n        // 显示视图对象\r\n        show : function() {\r\n            this.$el.show();\r\n        },\r\n        // 隐藏视图对象\r\n        hide : function() {\r\n            this.$el.hide();\r\n        },\r\n        /**\r\n         * 添加一个子视图对象到当前视图中\r\n         * @param {String} el 添加到视图的节点表达式\r\n         * @param {String} name 子视图名称\r\n         * @param {View Object} view 子视图对象\r\n         * @param {Boolean} await 当节点不存在时是否将子视图加入到待渲染列表\r\n         */\r\n        addChild : function(el, name, view, await) {\r\n            // 子视图添加的节点\r\n            var $node = this.$el;\r\n            if(el) {\r\n                $node = $node.find(el);\r\n            }\r\n\r\n            if($node.length) {\r\n                // 节点存在, 立即添加到视图\r\n                $node.append(view.el);\r\n                view.parent = this;\r\n\r\n                this.children.push({\r\n                    el : el,\r\n                    name : name,\r\n                    view : view\r\n                });\r\n                this.childrenAsName[name] = view;\r\n\r\n                if(!this.childrenAsEl[el]) {\r\n                    this.childrenAsEl[el] = [view];\r\n                } else {\r\n                    this.childrenAsEl[el].push(view);\r\n                }\r\n                if(!view.parent) view.parent = this;\t//给子视图添加父层视图引用\r\n                if(!view.controller) view.controller = this.controller;\t//给子视图添加控制器引用\r\n            } else if(await || await === undefined) {\r\n                // 节点不存在, 存储在待添加列表\r\n                this.awaitChildren.push({\r\n                    el : el,\r\n                    name : name,\r\n                    view : view\r\n                });\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * 渲染所有待添加的子视图列表\r\n         */\r\n        renderChildren : function() {\r\n            var awaitChildren = this.awaitChildren, child = null;\r\n\r\n            for(var i = 0, len = awaitChildren.length; i < len; i++) {\r\n                child = awaitChildren[i];\r\n                this.addChild(child.el, child.name, child.view, false);\r\n            }\r\n        },\r\n        /**\r\n         * 清除所有的待添加子视图列表\r\n         */\r\n        clearAwaitChildren : function() {\r\n            this.awaitChildren.length = 0;\r\n        },\r\n        /**\r\n         * 根据视图名称获取视图对象\r\n         */\r\n        getChildByName : function(name) {\r\n            return this.childrenAsName[name];\r\n        },\r\n        /**\r\n         * 根据表达式获取视图对象\r\n         */\r\n        getChildsByEl : function(el) {\r\n            return this.childrenAsEl[el];\r\n        },\r\n        /**\r\n         * 获取所有子视图列表\r\n         */\r\n        getChildren : function() {\r\n            return this.children;\r\n        },\r\n        // @private\r\n        _destroyChild : function(type, value) {\r\n            var children = this.children, child = null, childName = '', childEl = '', childValue = '';\r\n\r\n            for(var i = 0, len = children.length; i < len; i++) {\r\n                child = children[i];\r\n                childName = child.name;\r\n                childEl = child.el;\r\n                childValue = child[type];\r\n\r\n                if(childValue == value) {\r\n                    child.view.destroy();\r\n\r\n                    this.childrenAsName[childName] = null;\r\n                    this.childrenAsEl[childEl] = null;\r\n                    delete this.childrenAsName[childName];\r\n                    delete this.childrenAsEl[childEl];\r\n                    break;\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * 根据名称销毁子视图\r\n         * @param {String} name\r\n         */\r\n        destroyChildByName : function(name) {\r\n            this._destroyChild('name', name);\r\n        },\r\n        /**\r\n         * 根据表达式销毁子视图\r\n         * @param {String} el\r\n         */\r\n        destroyChildByEl : function(el) {\r\n            this._destroyChild('el', el);\r\n        },\r\n        /**\r\n         * 销毁所有子视图对象\r\n         */\r\n        destroyChilds : function() {\r\n            var children = this.children;\r\n            for(var i = children.length - 1; i >= 0; i--) {\r\n                child = children[i];\r\n                children.splice(i, 1);\r\n                child.view.destroy();\r\n            }\r\n\r\n            this.clearAwaitChildren();\r\n            this.childrenAsName = {};\r\n            this.childrenAsEl = {};\r\n            this.children.length = 0;\r\n        },\r\n        remove: function() {\r\n        \tPAWAView.__super__.remove.apply(this, arguments);\r\n        \t// 销毁子视图对象\r\n            this.destroyChilds();\r\n            // 解除事件绑定\r\n            this.undelegateEvents();\r\n            this.parent = null;\r\n            this.controller = null;\r\n            this.top = null;\r\n            this.model = null;\r\n        },\r\n        /**\r\n         * 销毁当前视图对象, 同时将销毁所有子视图\r\n         */\r\n        destroy : function() {\r\n        }\r\n    });\r\n\r\n    // 用于存放应用中共享的视图对象\r\n    PAWAView.shareViews = {\r\n        // @private\r\n        _shareList : {},\r\n        /**\r\n         * 添加共享的视图\r\n         */\r\n        add : function(name, view) {\r\n            this._shareList[name] = view;\r\n        },\r\n        /**\r\n         * 获取共享的视图\r\n         */\r\n        get : function(name) {\r\n            return this._shareList[name];\r\n        },\r\n        /**\r\n         * 移除视图\r\n         */\r\n        remove : function(name) {\r\n            var shareList = this._shareList;\r\n            shareList[name] = null;\r\n            delete shareList[name];\r\n        }\r\n    }\r\n\r\n    return PAWAView;\r\n});\r\n"]}