{"version":3,"sources":["assets/lib/PAWA/PAWA.js"],"names":["define","Backbone","FilterAreadyInChainError","filterName","name","message","err","Error","type","level","PAWAConstructor","Function","prototype","constructor","_","extend","window","PAWA","VERSION","lastHash","module","init","options","undefined","isSPA","pushState","this","router","PAWARouter","main","history","start","defaultHash","request","param","handlers","push","callback","bind","autoload","route","navigate","handleStatus","coreConfig","fragment","location","hash","substring","trigger","replace","routeStatus","hashArr","split","splice","join","addFilter","filterObj","position","prevOrNext","filterChain","__filterChain__","sortedName","_sortedName","filters","_filters","filterIndex","indexOf","isAddToTail","length","isAddToHead","isAddAbsolute","unshift","removeFilter","execFilter","routeReg","args","currFilter","i","len","conditions","test","handler","OK_STATUS","statusCode","isContinue"],"mappings":"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","file":"PAWA.js","sourcesContent":["/**\r\n * 定义PAWA对象\r\n */\r\ndefine(['backbone'], function(Backbone) {\r\n\t// 将PAWA原型引用为Backbone, 便于调用和扩展\r\n\tvar PAWAConstructor = new Function();\r\n\tPAWAConstructor.prototype = Backbone;\r\n\tPAWAConstructor.prototype.constructor = PAWAConstructor;\r\n\r\n\t// 创建并扩展PAWA对象\r\n\t_.extend(window.PAWA = new PAWAConstructor(), {\r\n\t\t// 框架版本号\r\n\t\tVERSION : '0.0.4',\r\n\t\t// 上一次自动加载时的Hash\r\n\t\tlastHash : '',\r\n\t\t// 初始化创建Router对象\r\n\t\t/**\r\n\t\t *\r\n\t\t * @param {Object} options 定义初始化参数\r\n\t\t *  {\r\n\t\t * \tisSPA: 是否是单页, true 单页， 否则是多页 , 默认false\r\n\t\t * \tpushState: 是否使用history api 默认false\r\n\t\t *  defaultHash: 如果地址栏上没有带hash的话，默认route到的位置  默认\"index/index\"\r\n\t\t * }\r\n\t\t */\r\n\t\tmodule : \"PAWA\",\r\n\t\tinit : function(options) {\r\n\t\t\tvar options = options || {};\r\n\t\t\toptions.isSPA === undefined && (options.isSPA = false);\r\n\t\t\toptions.pushState === undefined && (options.pushState = false);\r\n\t\t\t//options.defaultHash === PAWA.request.param(\"index\") && (options.defaultHash = \"index/index\");\r\n\t\t\tthis.router = new PAWA.PAWARouter();\r\n\t\t\tthis.main = options.main || function(){};\r\n\t\t\tthis.history.start({\r\n\t\t\t\tpushState : options.pushState\r\n\t\t\t});\r\n\t\t\tthis.defaultHash = options.defaultHash || PAWA.request.param(\"index\") || \"index/index\";\r\n\t\t\tif (options.isSPA) {\r\n\t\t\t\tPAWA.history.handlers.push({\r\n\t\t\t\t\tcallback : _.bind(this.autoload, this),\r\n\t\t\t\t\troute : /^(.*)$/\r\n\t\t\t\t});\r\n\t\t\t\tthis.navigate();\r\n\t\t\t}\r\n\t\t\tthis.handleStatus.coreConfig = options.coreConfig || {};\r\n\t\t},\r\n\t\t// 导航到当前的action\r\n\t\tnavigate : function(fragment) {\r\n\t\t\tvar router = this.router, fragment = fragment || location.hash.substring(1) || this.defaultHash;\r\n\t\t\trouter.navigate('', {\r\n\t\t\t\ttrigger : false,\r\n\t\t\t\treplace : true\r\n\t\t\t});\r\n\t\t\trouter.navigate(fragment, {\r\n\t\t\t\ttrigger : true,\r\n\t\t\t\treplace : true\r\n\t\t\t});\r\n\t\t},\r\n\t\t// 加载模块入口\r\n\t\tautoload : function(hash) {\r\n\t\t\tif (this.lastHash === hash) {\r\n\t\t\t\tPAWA.routeStatus = 404;\r\n\t\t\t\tPAWA.handleStatus(PAWA.routeStatus, hash);\r\n\t\t\t\tthrow Error('404: not found uri: ' + hash);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tthis.lastHash = hash;\r\n\t\t\t//this.main();\r\n\t\t\tvar hashArr = hash.split('/');\r\n\t\t\tvar module = hashArr.splice(0, 1), controller = hashArr.join('/');\r\n\t\t\tif (module && module != 'common') {\r\n\t\t\t\tthis.main();\r\n\t\t\t\tthis.navigate(hash);\r\n\t\t\t//\tvar mainPath = 'main.js';\r\n\t\t\t//\trequire([mainPath], _.bind(function(moduleMain) {\r\n\t\t\t//\t\tmoduleMain();\r\n\t\t\t//\t\tthis.navigate(hash);\r\n\t\t\t//\t}, this));\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * 给PAWA应用增加过滤器\r\n\t\t * @param {Object} filterName 过滤器名称\r\n\t\t * @param {Object} filterObj 过滤器对象\r\n\t\t * @param {Object} position 添加到过滤器中的位置\r\n\t\t * @param {Boolean} prevOrNext 添加到position（当且仅当postion是一个string）的前面还是后面，true为前面，false为后面，默认后面\r\n\t\t */\r\n\t\taddFilter: function addFilter(filterName, filterObj, position, prevOrNext) {\r\n\t\t\tvar filterChain = this.__filterChain__, \t\t\t//拿到责任链对象，这里不使用链表，用数组标识顺序\r\n\t\t\t\t//拿到责任链标识顺序的数组\r\n\t\t\t\tsortedName = filterChain._sortedName,\t\t\t\r\n\t\t\t\t//拿到责任链中的过滤器对象\r\n\t\t\t\tfilters = filterChain._filters,\t\t\t\t\t\r\n\t\t\t\t//查看当前要添加的过滤器在责任链中是否存在\r\n\t\t\t\tfilterIndex = sortedName.indexOf(filterName),\t\r\n\t\t\t\t//从尾部增加\r\n\t\t\t\tisAddToTail = position === sortedName.length || undefined === position,\t\r\n\t\t\t\t//从头部增加标识\r\n\t\t\t\tisAddToHead = position === 0,\t\t\t\t\t\r\n\t\t\t\t//从指定位置增加标识\r\n\t\t\t\tisAddAbsolute = typeof position === 'string' && sortedName.indexOf(position);\t\r\n\t\t\t\r\n\t\t\tif(filterIndex !== -1) {\t\t\t\t//如果责任链中已经有当前名称的filterName则报错,并且不再进行处理\r\n\t\t\t\tthrow new FilterAreadyInChainError(filterName);\r\n\t\t\t\treturn ;\r\n\t\t\t}\r\n\t\t\tif(isAddToTail)\t{\t\t\t//添加到尾部\r\n\t\t\t\tsortedName.push(filterName);\r\n\t\t\t\tfilters[filterName] = filterObj;\t\r\n\t\t\t} else if(isAddToHead) {\t//添加到头部\r\n\t\t\t\tsortedName.unshift(filterName);\r\n\t\t\t\tfilters[filterName] = filterObj;\r\n\t\t\t} else if(isAddAbsolute !== -1) {\t//从指定的地方添加\r\n\t\t\t\tif(prevOrNext) {\t//true为前面添加\r\n\t\t\t\t\tif(isAddAbsolute === 0) {\t//如果是在第0个位置，则unshift到前面\r\n\t\t\t\t\t\tsortedName.unshift(filterName);\r\n\t\t\t\t\t} else {\t\r\n\t\t\t\t\t\t//否则使用splice方法从中间加入\r\n\t\t\t\t\t\tsortedName.splice(isAddAbsolute-1, 0, filterName);\r\n\t\t\t\t\t}\t\r\n\t\t\t\t} else {\t//默认添加到后面\r\n\t\t\t\t\tsortedName.splice(isAddAbsolute, 0, filterName);\r\n\t\t\t\t}\r\n\t\t\t\t//将过滤器对象添加到责任链中\r\n\t\t\t\tfilters[filterName] = filterObj;\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * 删除一个过滤器\r\n \t\t * @param {Object} filterName 过滤器名\r\n\t\t */\r\n\t\tremoveFilter: function removeFilter(filterName) {\r\n\t\t\tvar filterChain = this.__filterChain__, \t\t\t//拿到责任链对象，这里不使用链表，用数组标识顺序\r\n\t\t\t//拿到责任链标识顺序的数组\r\n\t\t\tsortedName = filterChain._sortedName,\r\n\t\t\t//拿到责任链中的过滤器对象\r\n\t\t\tfilters = filterChain._filters,\t\t\t\t\t\r\n\t\t\t//查看当前要添加的过滤器在责任链中是否存在\r\n\t\t\tfilterIndex = sortedName.indexOf(filterName);\r\n\t\t\tif(filterIndex !== -1) {\r\n\t\t\t\tsortedName.splice(filterIndex, 1);\r\n\t\t\t}\r\n\t\t\treturn this;\r\n\t\t},\r\n\t\t/**\r\n\t\t * 解析过滤器\r\n\t\t * @param {Object} routeReg route的正则表示\r\n\t\t * @param {Object} fragment 当前帧\r\n\t\t * @param {Object} args 其余的参数信息\r\n\t\t */\r\n        execFilter: function execFilters(routeReg, fragment, args, filterIndex) {\r\n            var filterChain = this.__filterChain__,          //拿到责任链对象，这里不使用链表，用数组标识顺序\r\n            //拿到责任链标识顺序的数组\r\n                sortedName = filterChain._sortedName,\r\n            //拿到责任链中的过滤器对象\r\n                filters = filterChain._filters;\r\n            filterIndex = filterIndex || 0;\r\n            //拿到责任链当前的过滤器\r\n            var currFilter = filters[sortedName[filterIndex]];\r\n            if(!currFilter) return ;\r\n            if(typeof currFilter === 'object') {\r\n                for(var i = 0, len = currFilter.conditions.length;i < len; i ++) {\r\n                    if(currFilter.conditions[i].test(fragment)) {\r\n                        //调用责任链的处理方法,filter只调用一次\r\n                        currFilter.handler(routeReg, fragment, args, filterIndex);\r\n                        break;\r\n                    }\r\n                }\r\n                if(i === len) {\r\n                    currFilter.handler(routeReg, fragment, args, filterIndex + 1);\r\n                }\r\n            }\r\n            return this;\r\n        },\r\n        OK_STATUS: '200, 304, 201, 204',\r\n\t\t__filterChain__: {\r\n\t\t\t_sortedName: [],\r\n\t\t\t_filters: {\r\n\t\t\t}\r\n\t\t},\r\n\t\t/**\r\n\t\t * 根据状态码做对应的处理\r\n \t\t * @param {Object} statusCode\r\n\t\t */\r\n\t\thandleStatus: function(statusCode, route, fragment, args) {\r\n\t\t\tthis.handleStatus.coreConfig = this.handleStatus.coreConfig || {};\r\n\t\t\tvar handlers = this.handleStatus.coreConfig[statusCode], isContinue = true;\r\n\t\t\tif(!handlers) return;\r\n\t\t\tfor(var i = 0, len = handlers.length; i < len; i ++) {\r\n\t\t\t\tif(typeof handlers[i] === 'function') {\r\n\t\t\t\t\tisContinue = handlers[i](route, fragment, args);\r\n\t\t\t\t}\r\n\t\t\t\tif(isContinue === false) return ;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t\r\n\tfunction FilterAreadyInChainError(filterName) {\r\n\t\tvar name = \"FilterAreadyInChainError\",\r\n\t\t  \tmessage = \"filter 添加失败，\" + filterName + \" 已经存在，请先remove之后再进行添加！\";\r\n\t\tvar err = new Error(message);\r\n\t\terr.name = name;\r\n\t\terr.type = 'PAWA_FILTER_ERROR';\r\n\t\terr.level = '中';\r\n\t\treturn err;\r\n\t}\r\n\t\r\n\treturn PAWA;\r\n});\r\n"]}