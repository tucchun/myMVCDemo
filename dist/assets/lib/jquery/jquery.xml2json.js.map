{"version":3,"sources":["assets/lib/jquery/jquery.xml2json.js"],"names":["define","$","_","extend","xml2json","xml","extended","parseXML","node","simple","txt","obj","att","nodeType","jsVar","localName","nodeName","text","nodeValue","childNodes","length","each","n","cn","cnt","cnn","cnv","myArr","match","replace","attributes","a","at","atn","name","atv","value","String","concat","out","s","o","isArray","text2xml","root","documentElement","str","browser","ActiveXObject","DOMParser","async","e","Error","msie","loadXML","parseFromString","jQuery"],"mappings":"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","file":"jquery.xml2json.js","sourcesContent":["/*\r\n ### jQuery XML to JSON Plugin v1.1 - 2008-07-01 ###\r\n * http://www.fyneworks.com/ - diego@fyneworks.com\r\n * Dual licensed under the MIT and GPL licenses:\r\n *   http://www.opensource.org/licenses/mit-license.php\r\n *   http://www.gnu.org/licenses/gpl.html\r\n ###\r\n Website: http://www.fyneworks.com/jquery/xml-to-json/\r\n *//*\r\n # INSPIRED BY: http://www.terracoder.com/\r\n AND: http://www.thomasfrank.se/xml_to_json.html\r\n AND: http://www.kawa.net/works/js/xml/objtree-e.html\r\n *//*\r\n This simple script converts XML (document of code) into a JSON object. It is the combination of 2\r\n 'xml to json' great parsers (see below) which allows for both 'simple' and 'extended' parsing modes.\r\n */\r\n// Avoid collisions\r\ndefine([\r\n    'jquery'\r\n], function($, _){\r\n    (function($){\r\n        // Add function to jQuery namespace\r\n        $.extend({\r\n\r\n            // converts xml documents and xml text to json object\r\n            xml2json: function(xml, extended) {\r\n                if(!xml) return {}; // quick fail\r\n\r\n                //### PARSER LIBRARY\r\n                // Core function\r\n                function parseXML(node, simple){\r\n                    if(!node) return null;\r\n                    var txt = '', obj = null, att = null;\r\n                    var nt = node.nodeType, nn = jsVar(node.localName || node.nodeName);\r\n                    var nv = node.text || node.nodeValue || '';\r\n                    /*DBG*/ //if(window.console) console.log(['x2j',nn,nt,nv.length+' bytes']);\r\n                    if(node.childNodes){\r\n                        if(node.childNodes.length>0){\r\n                            /*DBG*/ //if(window.console) console.log(['x2j',nn,'CHILDREN',node.childNodes]);\r\n                            $.each(node.childNodes, function(n,cn){\r\n                                var cnt = cn.nodeType, cnn = jsVar(cn.localName || cn.nodeName);\r\n                                var cnv = cn.text || cn.nodeValue || '';\r\n                                /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>a',cnn,cnt,cnv]);\r\n                                if(cnt == 8){\r\n                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>b',cnn,'COMMENT (ignore)']);\r\n                                    return; // ignore comment node\r\n                                }\r\n                                else if(cnt == 3 || cnt == 4 || !cnn){\r\n                                    // ignore white-space in between tags\r\n                                    if(cnv.match(/^\\s+$/)){\r\n                                        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>c',cnn,'WHITE-SPACE (ignore)']);\r\n                                        return;\r\n                                    };\r\n                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>d',cnn,'TEXT']);\r\n                                    txt += cnv.replace(/^\\s+/,'').replace(/\\s+$/,'');\r\n                                    // make sure we ditch trailing spaces from markup\r\n                                }\r\n                                else{\r\n                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>e',cnn,'OBJECT']);\r\n                                    obj = obj || {};\r\n                                    if(obj[cnn]){\r\n                                        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>f',cnn,'ARRAY']);\r\n\r\n                                        // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child\r\n                                        if(!obj[cnn].length) obj[cnn] = myArr(obj[cnn]);\r\n                                        obj[cnn] = myArr(obj[cnn]);\r\n\r\n                                        obj[cnn][ obj[cnn].length ] = parseXML(cn, true/* simple */);\r\n                                        obj[cnn].length = obj[cnn].length;\r\n                                    }\r\n                                    else{\r\n                                        /*DBG*/ //if(window.console) console.log(['x2j',nn,'node>g',cnn,'dig deeper...']);\r\n                                        obj[cnn] = parseXML(cn);\r\n                                    };\r\n                                };\r\n                            });\r\n                        };//node.childNodes.length>0\r\n                    };//node.childNodes\r\n                    if(node.attributes){\r\n                        if(node.attributes.length>0){\r\n                            /*DBG*/ //if(window.console) console.log(['x2j',nn,'ATTRIBUTES',node.attributes])\r\n                            att = {}; obj = obj || {};\r\n                            $.each(node.attributes, function(a,at){\r\n                                var atn = jsVar(at.name), atv = at.value;\r\n                                att[atn] = atv;\r\n                                if(obj[atn]){\r\n                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'ARRAY']);\r\n\r\n                                    // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child\r\n                                    //if(!obj[atn].length) obj[atn] = myArr(obj[atn]);//[ obj[ atn ] ];\r\n                                    obj[cnn] = myArr(obj[cnn]);\r\n\r\n                                    obj[atn][ obj[atn].length ] = atv;\r\n                                    obj[atn].length = obj[atn].length;\r\n                                }\r\n                                else{\r\n                                    /*DBG*/ //if(window.console) console.log(['x2j',nn,'attr>',atn,'TEXT']);\r\n                                    obj[atn] = atv;\r\n                                };\r\n                            });\r\n                            //obj['attributes'] = att;\r\n                        };//node.attributes.length>0\r\n                    };//node.attributes\r\n                    if(obj){\r\n                        obj = $.extend( (txt!='' ? new String(txt) : {}),/* {text:txt},*/ obj || {}/*, att || {}*/);\r\n                        txt = (obj.text) ? (typeof(obj.text)=='object' ? obj.text : [obj.text || '']).concat([txt]) : txt;\r\n                        if(txt) obj.text = txt;\r\n                        txt = '';\r\n                    };\r\n                    var out = obj || txt;\r\n                    //console.log([extended, simple, out]);\r\n                    if(extended){\r\n                        if(txt) out = {};//new String(out);\r\n                        txt = out.text || txt || '';\r\n                        if(txt) out.text = txt;\r\n                        if(!simple) out = myArr(out);\r\n                    };\r\n                    return out;\r\n                };// parseXML\r\n                // Core Function End\r\n                // Utility functions\r\n                var jsVar = function(s){ return String(s || '').replace(/-/g,\"_\"); };\r\n\r\n                // NEW isNum function: 01/09/2010\r\n                // Thanks to Emile Grau, GigaTecnologies S.L., www.gigatransfer.com, www.mygigamail.com\r\n                function isNum(s){\r\n                    // based on utility function isNum from xml2json plugin (http://www.fyneworks.com/ - diego@fyneworks.com)\r\n                    // few bugs corrected from original function :\r\n                    // - syntax error : regexp.test(string) instead of string.test(reg)\r\n                    // - regexp modified to accept  comma as decimal mark (latin syntax : 25,24 )\r\n                    // - regexp modified to reject if no number before decimal mark  : \".7\" is not accepted\r\n                    // - string is \"trimmed\", allowing to accept space at the beginning and end of string\r\n                    var regexp=/^((-)?([0-9]+)(([\\.\\,]{0,1})([0-9]+))?$)/\r\n                    return (typeof s == \"number\") || regexp.test(String((s && typeof s == \"string\") ? jQuery.trim(s) : ''));\r\n                };\r\n                // OLD isNum function: (for reference only)\r\n                //var isNum = function(s){ return (typeof s == \"number\") || String((s && typeof s == \"string\") ? s : '').test(/^((-)?([0-9]*)((\\.{0,1})([0-9]+))?$)/); };\r\n\r\n                var myArr = function(o){\r\n\r\n                    // http://forum.jquery.com/topic/jquery-jquery-xml2json-problems-when-siblings-of-the-same-tagname-only-have-a-textnode-as-a-child\r\n                    //if(!o.length) o = [ o ]; o.length=o.length;\r\n                    if(!$.isArray(o)) o = [ o ]; o.length=o.length;\r\n\r\n                    // here is where you can attach additional functionality, such as searching and sorting...\r\n                    return o;\r\n                };\r\n                // Utility functions End\r\n                //### PARSER LIBRARY END\r\n\r\n                // Convert plain text to xml\r\n                if(typeof xml=='string') xml = $.text2xml(xml);\r\n\r\n                // Quick fail if not xml (or if this is a node)\r\n                if(!xml.nodeType) return;\r\n                if(xml.nodeType == 3 || xml.nodeType == 4) return xml.nodeValue;\r\n\r\n                // Find xml root node\r\n                var root = (xml.nodeType == 9) ? xml.documentElement : xml;\r\n\r\n                // Convert xml to json\r\n                var out = parseXML(root, true /* simple */);\r\n\r\n                // Clean-up memory\r\n                xml = null; root = null;\r\n\r\n                // Send output\r\n                return out;\r\n            },\r\n\r\n            // Convert text to XML DOM\r\n            text2xml: function(str) {\r\n                // NOTE: I'd like to use jQuery for this, but jQuery makes all tags uppercase\r\n                //return $(xml)[0];\r\n                var out;\r\n                try{\r\n                    var xml = ($.browser.msie)?new ActiveXObject(\"Microsoft.XMLDOM\"):new DOMParser();\r\n                    xml.async = false;\r\n                }catch(e){ throw new Error(\"XML Parser could not be instantiated\") };\r\n                try{\r\n                    if($.browser.msie) out = (xml.loadXML(str))?xml:false;\r\n                    else out = xml.parseFromString(str, \"text/xml\");\r\n                }catch(e){ throw new Error(\"Error parsing XML string\") };\r\n                return out;\r\n            }\r\n\r\n        }); // extend $\r\n\r\n    })(jQuery);\r\n});"]}