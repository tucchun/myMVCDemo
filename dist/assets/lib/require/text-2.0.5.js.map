{"version":3,"sources":["assets/lib/require/text-2.0.5.js"],"names":["define","module","text","fs","Cc","Ci","progIds","xmlRegExp","bodyRegExp","hasLocation","location","href","defaultProtocol","protocol","replace","defaultHostName","hostname","defaultPort","port","undefined","buildMap","masterConfig","config","version","strip","content","matches","match","jsEscape","createXhr","xhr","i","progId","XMLHttpRequest","ActiveXObject","e","parseName","name","modName","ext","temp","index","indexOf","isRelative","substring","length","moduleName","xdRegExp","useXhr","url","uProtocol","uHostName","uPort","exec","split","toLowerCase","finishLoad","onLoad","isBuild","load","req","inlineText","parsed","nonStripName","toUrl","get","err","error","write","pluginName","hasOwnProperty","asModule","writeFile","extPart","fileName","value","textWrite","contents","env","process","versions","node","require","nodeRequire","callback","file","readFileSync","errback","headers","header","open","setRequestHeader","onXhr","onreadystatechange","evt","status","readyState","Error","responseText","send","Packages","java","stringBuffer","line","encoding","io","File","lineSeparator","lang","System","getProperty","input","BufferedReader","InputStreamReader","FileInputStream","StringBuffer","readLine","charAt","append","String","toString","close","Components","classes","interfaces","utils","inStream","convertStream","readData","fileObj","FileUtils","createInstance","nsIFileInputStream","init","nsIConverterInputStream","available","DEFAULT_REPLACEMENT_CHARACTER","readString","path"],"mappings":"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","file":"text-2.0.5.js","sourcesContent":["/**\n * @license RequireJS text 2.0.5+ Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.\n * Available via the MIT or new BSD license.\n * see: http://github.com/requirejs/text for details\n */\n/*jslint regexp: true */\n/*global require, XMLHttpRequest, ActiveXObject,\n  define, window, process, Packages,\n  java, location, Components, FileUtils */\n\ndefine(['module'], function (module) {\n    'use strict';\n\n    var text, fs, Cc, Ci,\n        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],\n        xmlRegExp = /^\\s*<\\?xml(\\s)+version=[\\'\\\"](\\d)*.(\\d)*[\\'\\\"](\\s)*\\?>/im,\n        bodyRegExp = /<body[^>]*>\\s*([\\s\\S]+)\\s*<\\/body>/im,\n        hasLocation = typeof location !== 'undefined' && location.href,\n        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\\:/, ''),\n        defaultHostName = hasLocation && location.hostname,\n        defaultPort = hasLocation && (location.port || undefined),\n        buildMap = [],\n        masterConfig = (module.config && module.config()) || {};\n\n    text = {\n        version: '2.0.5+',\n\n        strip: function (content) {\n            //Strips <?xml ...?> declarations so that external SVG and XML\n            //documents can be added to a document without worry. Also, if the string\n            //is an HTML document, only the part inside the body tag is returned.\n            if (content) {\n                content = content.replace(xmlRegExp, \"\");\n                var matches = content.match(bodyRegExp);\n                if (matches) {\n                    content = matches[1];\n                }\n            } else {\n                content = \"\";\n            }\n            return content;\n        },\n\n        jsEscape: function (content) {\n            return content.replace(/(['\\\\])/g, '\\\\$1')\n                .replace(/[\\f]/g, \"\\\\f\")\n                .replace(/[\\b]/g, \"\\\\b\")\n                .replace(/[\\n]/g, \"\\\\n\")\n                .replace(/[\\t]/g, \"\\\\t\")\n                .replace(/[\\r]/g, \"\\\\r\")\n                .replace(/[\\u2028]/g, \"\\\\u2028\")\n                .replace(/[\\u2029]/g, \"\\\\u2029\");\n        },\n\n        createXhr: masterConfig.createXhr || function () {\n            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.\n            var xhr, i, progId;\n            if (typeof XMLHttpRequest !== \"undefined\") {\n                return new XMLHttpRequest();\n            } else if (typeof ActiveXObject !== \"undefined\") {\n                for (i = 0; i < 3; i += 1) {\n                    progId = progIds[i];\n                    try {\n                        xhr = new ActiveXObject(progId);\n                    } catch (e) {}\n\n                    if (xhr) {\n                        progIds = [progId];  // so faster next time\n                        break;\n                    }\n                }\n            }\n\n            return xhr;\n        },\n\n        /**\n         * Parses a resource name into its component parts. Resource names\n         * look like: module/name.ext!strip, where the !strip part is\n         * optional.\n         * @param {String} name the resource name\n         * @returns {Object} with properties \"moduleName\", \"ext\" and \"strip\"\n         * where strip is a boolean.\n         */\n        parseName: function (name) {\n            var modName, ext, temp,\n                strip = false,\n                index = name.indexOf(\".\"),\n                isRelative = name.indexOf('./') === 0 ||\n                             name.indexOf('../') === 0;\n\n            if (index !== -1 && (!isRelative || index > 1)) {\n                modName = name.substring(0, index);\n                ext = name.substring(index + 1, name.length);\n            } else {\n                modName = name;\n            }\n\n            temp = ext || modName;\n            index = temp.indexOf(\"!\");\n            if (index !== -1) {\n                //Pull off the strip arg.\n                strip = temp.substring(index + 1) === \"strip\";\n                temp = temp.substring(0, index);\n                if (ext) {\n                    ext = temp;\n                } else {\n                    modName = temp;\n                }\n            }\n\n            return {\n                moduleName: modName,\n                ext: ext,\n                strip: strip\n            };\n        },\n\n        xdRegExp: /^((\\w+)\\:)?\\/\\/([^\\/\\\\]+)/,\n\n        /**\n         * Is an URL on another domain. Only works for browser use, returns\n         * false in non-browser environments. Only used to know if an\n         * optimized .js version of a text resource should be loaded\n         * instead.\n         * @param {String} url\n         * @returns Boolean\n         */\n        useXhr: function (url, protocol, hostname, port) {\n            var uProtocol, uHostName, uPort,\n                match = text.xdRegExp.exec(url);\n            if (!match) {\n                return true;\n            }\n            uProtocol = match[2];\n            uHostName = match[3];\n\n            uHostName = uHostName.split(':');\n            uPort = uHostName[1];\n            uHostName = uHostName[0];\n\n            return (!uProtocol || uProtocol === protocol) &&\n                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&\n                   ((!uPort && !uHostName) || uPort === port);\n        },\n\n        finishLoad: function (name, strip, content, onLoad) {\n            content = strip ? text.strip(content) : content;\n            if (masterConfig.isBuild) {\n                buildMap[name] = content;\n            }\n            onLoad(content);\n        },\n\n        load: function (name, req, onLoad, config) {\n            //Name has format: some.module.filext!strip\n            //The strip part is optional.\n            //if strip is present, then that means only get the string contents\n            //inside a body tag in an HTML string. For XML/SVG content it means\n            //removing the <?xml ...?> declarations so the content can be inserted\n            //into the current doc without problems.\n\n            // Do not bother with the work if a build and text will\n            // not be inlined.\n            if (config.isBuild && !config.inlineText) {\n                onLoad();\n                return;\n            }\n\n            masterConfig.isBuild = config.isBuild;\n\n            var parsed = text.parseName(name),\n                nonStripName = parsed.moduleName +\n                    (parsed.ext ? '.' + parsed.ext : ''),\n                url = req.toUrl(nonStripName),\n                useXhr = (masterConfig.useXhr) ||\n                         text.useXhr;\n\n            //Load the text. Use XHR if possible and in a browser.\n            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {\n                text.get(url, function (content) {\n                    text.finishLoad(name, parsed.strip, content, onLoad);\n                }, function (err) {\n                    if (onLoad.error) {\n                        onLoad.error(err);\n                    }\n                });\n            } else {\n                //Need to fetch the resource across domains. Assume\n                //the resource has been optimized into a JS module. Fetch\n                //by the module name + extension, but do not include the\n                //!strip part to avoid file system issues.\n                req([nonStripName], function (content) {\n                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,\n                                    parsed.strip, content, onLoad);\n                });\n            }\n        },\n\n        write: function (pluginName, moduleName, write, config) {\n            if (buildMap.hasOwnProperty(moduleName)) {\n                var content = text.jsEscape(buildMap[moduleName]);\n                write.asModule(pluginName + \"!\" + moduleName,\n                               \"define(function () { return '\" +\n                                   content +\n                               \"';});\\n\");\n            }\n        },\n\n        writeFile: function (pluginName, moduleName, req, write, config) {\n            var parsed = text.parseName(moduleName),\n                extPart = parsed.ext ? '.' + parsed.ext : '',\n                nonStripName = parsed.moduleName + extPart,\n                //Use a '.js' file name so that it indicates it is a\n                //script that can be loaded across domains.\n                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';\n\n            //Leverage own load() method to load plugin value, but only\n            //write out values that do not have the strip argument,\n            //to avoid any potential issues with ! in file names.\n            text.load(nonStripName, req, function (value) {\n                //Use own write() method to construct full module value.\n                //But need to create shell that translates writeFile's\n                //write() to the right interface.\n                var textWrite = function (contents) {\n                    return write(fileName, contents);\n                };\n                textWrite.asModule = function (moduleName, contents) {\n                    return write.asModule(moduleName, fileName, contents);\n                };\n\n                text.write(pluginName, nonStripName, textWrite, config);\n            }, config);\n        }\n    };\n\n    if (masterConfig.env === 'node' || (!masterConfig.env &&\n            typeof process !== \"undefined\" &&\n            process.versions &&\n            !!process.versions.node)) {\n        //Using special require.nodeRequire, something added by r.js.\n        fs = require.nodeRequire('fs');\n\n        text.get = function (url, callback) {\n            var file = fs.readFileSync(url, 'utf8');\n            //Remove BOM (Byte Mark Order) from utf8 files if it is there.\n            if (file.indexOf('\\uFEFF') === 0) {\n                file = file.substring(1);\n            }\n            callback(file);\n        };\n    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&\n            text.createXhr())) {\n        text.get = function (url, callback, errback, headers) {\n            var xhr = text.createXhr(), header;\n            xhr.open('GET', url, true);\n\n            //Allow plugins direct access to xhr headers\n            if (headers) {\n                for (header in headers) {\n                    if (headers.hasOwnProperty(header)) {\n                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);\n                    }\n                }\n            }\n\n            //Allow overrides specified in config\n            if (masterConfig.onXhr) {\n                masterConfig.onXhr(xhr, url);\n            }\n\n            xhr.onreadystatechange = function (evt) {\n                var status, err;\n                //Do not explicitly handle errors, those should be\n                //visible via console output in the browser.\n                if (xhr.readyState === 4) {\n                    status = xhr.status;\n                    if (status > 399 && status < 600) {\n                        //An http 4xx or 5xx error. Signal an error.\n                        err = new Error(url + ' HTTP status: ' + status);\n                        err.xhr = xhr;\n                        errback(err);\n                    } else {\n                        callback(xhr.responseText);\n                    }\n                }\n            };\n            xhr.send(null);\n        };\n    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&\n            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {\n        //Why Java, why is this so awkward?\n        text.get = function (url, callback) {\n            var stringBuffer, line,\n                encoding = \"utf-8\",\n                file = new java.io.File(url),\n                lineSeparator = java.lang.System.getProperty(\"line.separator\"),\n                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),\n                content = '';\n            try {\n                stringBuffer = new java.lang.StringBuffer();\n                line = input.readLine();\n\n                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324\n                // http://www.unicode.org/faq/utf_bom.html\n\n                // Note that when we use utf-8, the BOM should appear as \"EF BB BF\", but it doesn't due to this bug in the JDK:\n                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058\n                if (line && line.length() && line.charAt(0) === 0xfeff) {\n                    // Eat the BOM, since we've already found the encoding on this file,\n                    // and we plan to concatenating this buffer with others; the BOM should\n                    // only appear at the top of a file.\n                    line = line.substring(1);\n                }\n\n                stringBuffer.append(line);\n\n                while ((line = input.readLine()) !== null) {\n                    stringBuffer.append(lineSeparator);\n                    stringBuffer.append(line);\n                }\n                //Make sure we return a JavaScript string and not a Java string.\n                content = String(stringBuffer.toString()); //String\n            } finally {\n                input.close();\n            }\n            callback(content);\n        };\n    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&\n            typeof Components !== 'undefined' && Components.classes &&\n            Components.interfaces)) {\n        //Avert your gaze!\n        Cc = Components.classes,\n        Ci = Components.interfaces;\n        Components.utils['import']('resource://gre/modules/FileUtils.jsm');\n\n        text.get = function (url, callback) {\n            var inStream, convertStream,\n                readData = {},\n                fileObj = new FileUtils.File(url);\n\n            //XPCOM, you so crazy\n            try {\n                inStream = Cc['@mozilla.org/network/file-input-stream;1']\n                           .createInstance(Ci.nsIFileInputStream);\n                inStream.init(fileObj, 1, 0, false);\n\n                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']\n                                .createInstance(Ci.nsIConverterInputStream);\n                convertStream.init(inStream, \"utf-8\", inStream.available(),\n                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);\n\n                convertStream.readString(inStream.available(), readData);\n                convertStream.close();\n                inStream.close();\n                callback(readData.value);\n            } catch (e) {\n                throw new Error((fileObj && fileObj.path || '') + ': ' + e);\n            }\n        };\n    }\n    return text;\n});\n"]}